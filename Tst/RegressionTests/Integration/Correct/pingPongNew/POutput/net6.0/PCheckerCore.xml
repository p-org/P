<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCheckerCore</name>
    </assembly>
    <members>
        <member name="T:PChecker.Actors.Actor">
            <summary>
            Type that implements an actor. Inherit from this class to declare a custom actor.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.ActionCache">
            <summary>
            Cache of actor types to a map of event types to action declarations.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.Runtime">
            <summary>
            The runtime that executes this actor.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.Id">
            <summary>
            Unique id that identifies this actor.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.Manager">
            <summary>
            Manages the actor.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.Inbox">
            <summary>
            The inbox of the actor. Incoming events are enqueued here.
            Events are dequeued to be processed.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.ActionMap">
            <summary>
            Map from event types to cached action delegates.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.Timers">
            <summary>
            Map that contains the active timers.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.CurrentStatus">
            <summary>
            The current status of the actor. It is marked volatile as
            the runtime can read it concurrently.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.CurrentStateName">
            <summary>
            Gets the name of the current state, if there is one.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.IsHalted">
            <summary>
            Checks if the actor is halted.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is available.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by this actor. This value
            is initially either <see cref="F:System.Guid.Empty"/> or the <see cref="T:System.Guid"/> specified
            upon creation. This value is automatically set to the operation group id of the
            last dequeue or receive operation, if it is not <see cref="F:System.Guid.Empty"/>. This
            value can also be manually set using the property.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.Logger">
            <summary>
            The installed runtime logger.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Actor.HashedState">
            <summary>
            User-defined hashed state of the actor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Actor"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.Configure(PChecker.Actors.ActorRuntime,PChecker.Actors.ActorId,PChecker.Actors.Managers.IActorManager,PChecker.Actors.EventQueues.IEventQueue)">
            <summary>
            Configures the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.InitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.CreateActor(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified type and with the specified optional
            <see cref="T:PChecker.Actors.Events.Event"/>. This <see cref="T:PChecker.Actors.Events.Event"/> can only be used to access
            its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.CreateActor(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified type and name, and with the specified
            optional <see cref="T:PChecker.Actors.Events.Event"/>. This <see cref="T:PChecker.Actors.Events.Event"/> can only be used to
            access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:PChecker.Actors.Events.Event"/> to a target.
            </summary>
            <param name="id">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional checkerConfiguration of a send operation.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.ReceiveEventAsync(System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean})">
            <summary>
            Waits to receive an <see cref="T:PChecker.Actors.Events.Event"/> of the specified type
            that satisfies an optional predicate.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="predicate">The optional predicate.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an <see cref="T:PChecker.Actors.Events.Event"/> of the specified types.
            </summary>
            <param name="eventTypes">The event types to wait for.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.ReceiveEventAsync(System.Tuple{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an <see cref="T:PChecker.Actors.Events.Event"/> of the specified types
            that satisfy the specified predicates.
            </summary>
            <param name="events">Event types and predicates.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.StartTimer(System.TimeSpan,PChecker.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a timer that sends a <see cref="T:PChecker.Actors.Timers.TimerElapsedEvent"/> to this actor after the
            specified due time. The timer accepts an optional payload to be used during timeout.
            The timer is automatically disposed after it timeouts. To manually stop and dispose
            the timer, invoke the <see cref="M:PChecker.Actors.Actor.StopTimer(PChecker.Actors.Timers.TimerInfo)"/> method.
            </summary>
            <param name="startDelay">The amount of time to wait before sending the timeout event.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.StartPeriodicTimer(System.TimeSpan,System.TimeSpan,PChecker.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a periodic timer that sends a <see cref="T:PChecker.Actors.Timers.TimerElapsedEvent"/> to this actor after
            the specified due time, and then repeats after each specified period. The timer accepts
            an optional payload to be used during timeout. The timer can be stopped by invoking the
            <see cref="M:PChecker.Actors.Actor.StopTimer(PChecker.Actors.Timers.TimerInfo)"/> method.
            </summary>
            <param name="startDelay">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.StopTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Stops and disposes the specified timer.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing. The value is used
            to generate a number in the range [0..maxValue), where 0
            triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during
            analysis or testing. The value is used to generate an integer in
            the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic integer.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.Monitor``1(PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.Monitor(System.Type,PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified monitor with the specified event.
            </summary>
            <param name="type">Type of the monitor.</param>
            <param name="e">The event to send.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.RaiseHaltEvent">
            <summary>
            Raises a <see cref='T:PChecker.Actors.Events.HaltEvent'/> to halt the actor at the end of the current action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.OnInitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor is initialized with an optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.OnEventDequeuedAsync(PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor successfully dequeues
            an event from its inbox. This method is not called when the dequeue happens
            via a receive statement.
            </summary>
            <param name="e">The event that was dequeued.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.OnEventHandledAsync(PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued
            event, unless the handler of the dequeued event caused the actor to halt (either
            normally or due to an exception). The actor will either become idle or dequeue
            the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.OnEventUnhandledAsync(PChecker.Actors.Events.Event,System.String)">
            <summary>
            Asynchronous callback that is invoked when the actor receives an event that
            it is not prepared to handle. The callback is invoked first, after which the
            actor will necessarily throw an <see cref="T:PChecker.Actors.Exceptions.UnhandledEventException"/>
            </summary>
            <param name="e">The event that was unhandled.</param>
            <param name="state">The state when the event was dequeued.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.OnExceptionHandledAsync(System.Exception,PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor handles an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.OnHaltAsync(PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor halts.
            </summary>
            <param name="e">The event being handled when the actor halted.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.Enqueue(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Enqueues the specified event and its metadata.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.RunEventHandlerAsync">
            <summary>
            Runs the event handler. The handler terminates if there is no next
            event to process or if the actor has halted.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.HandleEventAsync(PChecker.Actors.Events.Event)">
            <summary>
            Handles the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.InvokeActionAsync(PChecker.Actors.Handlers.CachedDelegate,PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified action delegate.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.InvokeUserCallbackAsync(System.String,PChecker.Actors.Events.Event,System.String)">
            <summary>
            Invokes the specified event handler user callback.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.InvokeOnFailureExceptionFilter(PChecker.Actors.Handlers.CachedDelegate,System.Exception)">
            <summary>
            An exception filter that calls,
            which can choose to fast-fail the app to get a full dump.
            </summary>
            <param name="action">The action being executed when the failure occurred.</param>
            <param name="ex">The exception being tested.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.TryHandleActionInvocationExceptionAsync(System.Exception,System.String)">
            <summary>
            Tries to handle an exception thrown during an action invocation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.IsEventIgnored(PChecker.Actors.Events.Event)">
            <summary>
            Checks if the specified event is ignored.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.GetHashedState">
            <summary>
            Returns the hashed state of this actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.RegisterTimer(System.TimeSpan,System.TimeSpan,PChecker.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Registers a new timer using the specified checkerConfiguration.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.UnregisterTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Unregisters the specified timer.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.SetupEventHandlers">
            <summary>
            Extracts user declarations and sets up the event handlers.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.GetAllRegisteredEvents">
            <summary>
            Returns the set of all registered events (for code coverage).
            It does not include events that are deferred or ignored.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.AssertActionValidity(System.Reflection.MethodInfo)">
            <summary>
            Checks the validity of the specified action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:PChecker.Exceptions.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.OnExceptionHandler(System.Exception,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invokes user callback when the actor throws an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>True if the exception was handled, else false if it should continue to get thrown.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.OnUnhandledEventExceptionHandler(PChecker.Actors.Exceptions.UnhandledEventException,PChecker.Actors.Events.Event)">
            <summary>
            Invokes user callback when the actor receives an event that it cannot handle.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The unhandled event.</param>
            <returns>True if the the actor should gracefully halt, else false if the exception
            should continue to get thrown.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.OnException(System.Exception,System.String,PChecker.Actors.Events.Event)">
            <summary>
            User callback when the actor throws an exception. By default,
            the actor throws the exception causing the runtime to fail.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:PChecker.Actors.Actor.HaltAsync(PChecker.Actors.Events.Event)">
            <summary>
            Halts the actor.
            </summary>
            <param name="e">The event being handled when the actor halts.</param>
        </member>
        <member name="M:PChecker.Actors.Actor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.ToString">
            <summary>
            Returns a string that represents the current actor.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Actor.Status">
            <summary>
            The status of the actor.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.Status.Active">
            <summary>
            The actor is active.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.Status.Halting">
            <summary>
            The actor is halting.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.Status.Halted">
            <summary>
            The actor is halted.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Actor.UserCallbackType">
            <summary>
            The type of a user callback.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Actor.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked
            to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Actor.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Actor.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Actor.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:PChecker.Actors.ActorFactory">
            <summary>
            Factory for creating actor instances.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorFactory.ActorConstructorCache">
            <summary>
            Cache storing actors constructors.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorFactory.Create(System.Type)">
            <summary>
            Creates a new <see cref="T:PChecker.Actors.Actor"/> instance of the specified type.
            </summary>
            <param name="type">The type of the actors.</param>
            <returns>The created actor instance.</returns>
        </member>
        <member name="T:PChecker.Actors.ActorId">
            <summary>
            Unique actor id.
            </summary>
        </member>
        <member name="P:PChecker.Actors.ActorId.Runtime">
            <summary>
            The runtime that executes the actor with this id.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.Value">
            <summary>
            Unique id, when <see cref="F:PChecker.Actors.ActorId.NameValue"/> is empty.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.NameValue">
            <summary>
            Unique id, when non-empty.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.Type">
            <summary>
            The type of the actor associated with this id.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.Name">
            <summary>
            Name used for logging.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.Generation">
            <summary>
            Generation of the runtime that created this actor id.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorId.Endpoint">
            <summary>
            Endpoint.
            </summary>
        </member>
        <member name="P:PChecker.Actors.ActorId.IsNameUsedForHashing">
            <summary>
            True if <see cref="F:PChecker.Actors.ActorId.NameValue"/> is used as the unique id, else false.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.#ctor(System.Type,System.String,PChecker.Actors.ActorRuntime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.ActorId"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.Bind(PChecker.Actors.ActorRuntime)">
            <summary>
            Bind the actor id.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.ToString">
            <summary>
            Returns a string that represents the current actor id.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.Equals(PChecker.Actors.ActorId)">
            <summary>
            Indicates whether the specified <see cref="T:PChecker.Actors.ActorId"/> is equal
            to the current <see cref="T:PChecker.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorId.CompareTo(PChecker.Actors.ActorId)">
            <summary>
            Compares the specified <see cref="T:PChecker.Actors.ActorId"/> with the current
            <see cref="T:PChecker.Actors.ActorId"/> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="T:PChecker.Actors.ActorRuntime">
            <summary>
            Runtime for creating and executing actors.
            </summary>
        </member>
        <member name="F:PChecker.Actors.ActorRuntime.ActorMap">
            <summary>
            Map from unique actor ids to actors.
            </summary>
        </member>
        <member name="P:PChecker.Actors.ActorRuntime.LogWriter">
            <summary>
            Responsible for writing to all registered <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="P:PChecker.Actors.ActorRuntime.Logger">
            <summary>
            Used to log text messages. Use <see cref="M:PChecker.Runtime.ICoyoteRuntime.SetLogger(System.IO.TextWriter)"/>
            to replace the logger with a custom one.
            </summary>
        </member>
        <member name="E:PChecker.Actors.ActorRuntime.OnEventDropped">
            <summary>
            Callback that is fired when a Coyote event is dropped.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.#ctor(PChecker.CheckerConfiguration,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.ActorRuntime"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorId(System.Type,System.String)">
            <summary>
            Creates a fresh actor id that has not yet been bound to any actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActor(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access its payload,
            and cannot be handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActor(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access
            its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:PChecker.Actors.ActorId"/>.
            This method optionally passes an <see cref="T:PChecker.Actors.Events.Event"/> to the new actor, which can only
            be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorAndExecuteAsync(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access its payload,
            and cannot be handled. The method returns only when the actor is initialized and
            the <see cref="T:PChecker.Actors.Events.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorAndExecuteAsync(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access
            its payload, and cannot be handled. The method returns only when the actor is
            initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/>, using the specified unbound
            actor id, and passes the specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only
            be used to access its payload, and cannot be handled. The method returns only when
            the actor is initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:PChecker.Actors.Events.Event"/> to an actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:PChecker.Actors.Events.Event"/> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.GetCurrentOperationGroupId(PChecker.Actors.ActorId)">
            <summary>
            Returns the operation group id of the actor with the specified id. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:PChecker.Actors.ActorId"/> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Creates a new <see cref="T:PChecker.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Creates a new <see cref="T:PChecker.Actors.Actor"/> of the specified <see cref="T:System.Type"/>. The method
            returns only when the actor is initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Creates a new <see cref="T:PChecker.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:PChecker.Actors.Events.Event"/> to an actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:PChecker.Actors.Events.Event"/> to an actor. Returns immediately if the target was
            already running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.EnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.RunActorEventHandler(PChecker.Actors.Actor,PChecker.Actors.Events.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            This is a fire and forget invocation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.RunActorEventHandlerAsync(PChecker.Actors.Actor,PChecker.Actors.Events.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.CreateActorTimer(PChecker.Actors.Timers.TimerInfo,PChecker.Actors.Actor)">
            <summary>
            Creates a new timer that sends a <see cref="T:PChecker.Actors.Timers.TimerElapsedEvent"/> to its owner actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.TryCreateMonitor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.GetActorWithId``1(PChecker.Actors.ActorId)">
            <summary>
            Gets the actor of type <typeparamref name="TActor"/> with the specified id,
            or null if no such actor exists.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyInvokedAction(PChecker.Actors.Actor,System.Reflection.MethodInfo,System.String,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that an actor invoked an action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyDequeuedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies that an actor dequeued an <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyDefaultEventDequeued(PChecker.Actors.Actor)">
            <summary>
            Notifies that an actor dequeued the default <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyDefaultEventHandlerCheck(PChecker.Actors.Actor)">
            <summary>
            Notifies that the inbox of the specified actor is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyRaisedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies that an actor raised an <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyHandleRaisedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that an actor is handling a raised <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyReceiveCalled(PChecker.Actors.Actor)">
            <summary>
            Notifies that an actor called <see cref="M:PChecker.Actors.Actor.ReceiveEventAsync(System.Type[])"/>
            or one of its overloaded methods.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyReceivedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies that an actor enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyReceivedEventWithoutWaiting(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies that an actor received an event without waiting because the event
            was already in the inbox when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyWaitTask(PChecker.Actors.Actor,System.Threading.Tasks.Task)">
            <summary>
            Notifies that an actor is waiting for the specified task to complete.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyWaitEvent(PChecker.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies that an actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyEnteredState(PChecker.Actors.StateMachine)">
            <summary>
            Notifies that a state machine entered a state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyExitedState(PChecker.Actors.StateMachine)">
            <summary>
            Notifies that a state machine exited a state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyPopState(PChecker.Actors.StateMachine)">
            <summary>
            Notifies that a state machine invoked pop.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyInvokedOnEntryAction(PChecker.Actors.StateMachine,System.Reflection.MethodInfo,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that a state machine invoked an action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyInvokedOnExitAction(PChecker.Actors.StateMachine,System.Reflection.MethodInfo,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that a state machine invoked an action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyEnteredState(PChecker.Specifications.Monitors.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyExitedState(PChecker.Specifications.Monitors.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyInvokedAction(PChecker.Specifications.Monitors.Monitor,System.Reflection.MethodInfo,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyRaisedEvent(PChecker.Specifications.Monitors.Monitor,PChecker.Actors.Events.Event)">
            <summary>
            Notifies that a monitor raised an <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.NotifyMonitorError(PChecker.Specifications.Monitors.Monitor)">
            <summary>
            Notifies that a monitor found an error.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.TryHandleDroppedEvent(PChecker.Actors.Events.Event,PChecker.Actors.ActorId)">
            <summary>
            Tries to handle the specified dropped <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.SetLogger(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.RegisterLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.RemoveLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.ActorRuntime.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.EventQueues.DequeueStatus">
            <summary>
            The status returned as the result of a dequeue operation.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.DequeueStatus.Success">
            <summary>
            An event was successfully dequeued.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.DequeueStatus.Raised">
            <summary>
            The raised event was dequeued.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.DequeueStatus.Default">
            <summary>
            The default event was dequeued.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.DequeueStatus.NotAvailable">
            <summary>
            No event available to dequeue.
            </summary>
        </member>
        <member name="T:PChecker.Actors.EventQueues.EnqueueStatus">
            <summary>
            The status returned as the result of an enqueue operation.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EnqueueStatus.EventHandlerRunning">
            <summary>
            The event handler is already running.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EnqueueStatus.EventHandlerNotRunning">
            <summary>
            The event handler is not running.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EnqueueStatus.Received">
            <summary>
            The event was consumed at a receive statement.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EnqueueStatus.NextEventUnavailable">
            <summary>
            There is no next event available to dequeue and handle.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EnqueueStatus.Dropped">
            <summary>
            The event was dropped.
            </summary>
        </member>
        <member name="T:PChecker.Actors.EventQueues.EventQueue">
            <summary>
            Implements a queue of events.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.ActorManager">
            <summary>
            Manages the actor that owns this queue.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.Queue">
            <summary>
            The internal queue.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.EventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:PChecker.Actors.EventQueues.EventQueue.Size">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.Actors.EventQueues.EventQueue.IsEventRaised">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.#ctor(PChecker.Actors.Managers.IActorManager)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.EventQueues.EventQueue"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.Enqueue(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.RaiseEvent(PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.ReceiveEventAsync(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}}[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued based on the conditions defined in the event wait types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.Close">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.EventQueue.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.EventQueues.IEventQueue">
            <summary>
            Interface of a queue of events.
            </summary>
        </member>
        <member name="P:PChecker.Actors.EventQueues.IEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:PChecker.Actors.EventQueues.IEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.Enqueue(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.RaiseEvent(PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.ReceiveEventAsync(System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.IEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="T:PChecker.Actors.EventQueues.Mocks.MockEventQueue">
            <summary>
            Implements a queue of events that is used during testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ActorManager">
            <summary>
            Manages the actor that owns this queue.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Actor">
            <summary>
            The actor that owns this queue.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Queue">
            <summary>
            The internal queue that contains events with their metadata.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:PChecker.Actors.EventQueues.Mocks.MockEventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:PChecker.Actors.EventQueues.Mocks.MockEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.#ctor(PChecker.Actors.Managers.IActorManager,PChecker.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.EventQueues.Mocks.MockEventQueue"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Enqueue(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.TryDequeueEvent(System.Boolean)">
            <summary>
            Dequeues the next event and its metadata, if there is one available, else returns null.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.RaiseEvent(PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ReceiveEventAsync(System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ReceiveEventAsync(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}}[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{PChecker.Actors.Events.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.GetCachedState">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Close">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:PChecker.Actors.EventQueues.Mocks.MockEventQueue.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Events.DefaultEvent">
            <summary>
            A default event that is generated by the runtime when
            no user-defined event is dequeued or received.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.DefaultEvent.Instance">
            <summary>
            Gets a <see cref="T:PChecker.Actors.Events.DefaultEvent"/> instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.DefaultEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.DefaultEvent"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Events.Event">
            <summary>
            Abstract class representing an event.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Events.EventInfo">
            <summary>
            Contains an <see cref="T:PChecker.Actors.Events.Event"/>, and its associated metadata.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventInfo.OriginInfo">
            <summary>
            Information regarding the event origin.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventInfo.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventInfo.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event type in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventInfo.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.EventInfo.#ctor(PChecker.Actors.Events.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.EventInfo.#ctor(PChecker.Actors.Events.Event,PChecker.Actors.Events.EventOriginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.EventInfo"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Events.EventOriginInfo">
            <summary>
            Contains the origin information of an <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventOriginInfo.SenderActorId">
            <summary>
            The sender actor id.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventOriginInfo.SenderActorName">
            <summary>
            The sender actor name.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.EventOriginInfo.SenderStateName">
            <summary>
            The sender state name, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.EventOriginInfo.#ctor(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.EventOriginInfo"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Events.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Events.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.GotoStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:PChecker.Actors.Events.HaltEvent">
            <summary>
            The halt event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Events.HaltEvent.Instance">
            <summary>
            Gets a <see cref="T:PChecker.Actors.Events.HaltEvent"/> instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.HaltEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.HaltEvent"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Events.PushStateEvent">
            <summary>
            The push state event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Events.PushStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.PushStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.PushStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:PChecker.Actors.Events.QuiescentEvent">
            <summary>
            Signals that an actor has reached quiescence.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Events.QuiescentEvent.ActorId">
            <summary>
            The id of the actor that has reached quiescence.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.QuiescentEvent.#ctor(PChecker.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.QuiescentEvent"/> class.
            </summary>
            <param name="id">The id of the actor that has reached quiescence.</param>
        </member>
        <member name="T:PChecker.Actors.Events.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Events.WildCardEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Events.WildCardEvent"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Exceptions.ActionExceptionFilterException">
            <summary>
            Exception that is thrown by the runtime upon an <see cref="T:PChecker.Actors.Actor"/> action failure.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Exceptions.ActionExceptionFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Exceptions.ActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:PChecker.Actors.Exceptions.ActionExceptionFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Exceptions.ActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:PChecker.Actors.Exceptions.OnEventDroppedHandler">
            <summary>
            Handles the <see cref="E:PChecker.Actors.IActorRuntime.OnEventDropped"/> event.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Exceptions.OnExceptionOutcome">
            <summary>
            The outcome when an <see cref="T:PChecker.Actors.Actor"/> throws an exception.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Exceptions.OnExceptionOutcome.ThrowException">
            <summary>
            The actor throws the exception causing the runtime to fail.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Exceptions.OnExceptionOutcome.HandledException">
            <summary>
            The actor handles the exception and resumes execution.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Exceptions.OnExceptionOutcome.Halt">
            <summary>
            The actor handles the exception and halts.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Exceptions.UnhandledEventException">
            <summary>
            Signals that an <see cref="T:PChecker.Actors.Actor"/> received an unhandled event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Exceptions.UnhandledEventException.UnhandledEvent">
            <summary>
             The unhandled event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Exceptions.UnhandledEventException.CurrentStateName">
            <summary>
            The name of the current state, if the actor that threw the exception
            is a <see cref="T:PChecker.Actors.StateMachine"/> and a state exists, else null.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Exceptions.UnhandledEventException.#ctor(PChecker.Actors.Events.Event,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Exceptions.UnhandledEventException"/> class.
            </summary>
            <param name="unhandledEvent">The event that was unhandled.</param>
            <param name="currentStateName">The name of the current state, if the actor that threw the exception
            is a state machine and a state exists, else null.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:PChecker.Actors.Handlers.ActionEventHandlerDeclaration">
            <summary>
            Defines an action event handler declaration.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Handlers.ActionEventHandlerDeclaration.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Handlers.ActionEventHandlerDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Handlers.ActionEventHandlerDeclaration"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Handlers.CachedDelegate">
            <summary>
            An actor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Handlers.DeferEventHandlerDeclaration">
            <summary>
            Defines a defer event handler declaration.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Handlers.EventHandlerDeclaration">
            <summary>
            An abstract event handler declaration.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Handlers.IgnoreEventHandlerDeclaration">
            <summary>
            Defines an ignore event handler declaration.
            </summary>
        </member>
        <member name="T:PChecker.Actors.IActorRuntime">
            <summary>
            Interface that exposes runtime methods for creating and executing actors.
            </summary>
        </member>
        <member name="E:PChecker.Actors.IActorRuntime.OnEventDropped">
            <summary>
            Callback that is fired when an event is dropped.
            </summary>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActorId(System.Type,System.String)">
            <summary>
            Creates a fresh actor id that has not yet been bound to any actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Unique name used to create or get the actor id.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActor(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access its payload,
            and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActor(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access
            its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:PChecker.Actors.ActorId"/>.
            This method optionally passes an <see cref="T:PChecker.Actors.Events.Event"/> to the new actor, which can only
            be used to access its payload, and cannot be handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access its payload,
            and cannot be handled. The method returns only when the actor is initialized and
            the <see cref="T:PChecker.Actors.Events.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only be used to access
            its payload, and cannot be handled. The method returns only when the actor is
            initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/>, using the specified unbound
            actor id, and passes the specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event can only
            be used to access its payload, and cannot be handled. The method returns only when
            the actor is initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any)
            is handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:PChecker.Actors.Events.Event"/> to an actor.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional checkerConfiguration of a send operation.</param>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:PChecker.Actors.Events.Event"/> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional checkerConfiguration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.GetCurrentOperationGroupId(PChecker.Actors.ActorId)">
            <summary>
            Returns the operation group id of the actor with the specified id. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:PChecker.Actors.ActorId"/> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
            <param name="currentActorId">The id of the currently executing actor.</param>
            <returns>The unique identifier.</returns>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.RegisterLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
            <param name="log">The log writer to register.</param>
        </member>
        <member name="M:PChecker.Actors.IActorRuntime.RemoveLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
            <param name="log">The previously registered log writer to unregister.</param>
        </member>
        <member name="T:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter">
            <summary>
            This class implements IActorRuntimeLog and generates output in a a human readable text format.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.Logger">
            <summary>
            Get or set the TextWriter to write to.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnAssertionFailure(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnCreateActor(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnCreateStateMachine(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnCreateMonitor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnCreateTimer(PChecker.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnDefaultEventHandler(PChecker.Actors.ActorId,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnDequeueEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnEnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnExceptionHandled(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnExceptionThrown(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnExecuteAction(PChecker.Actors.ActorId,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnGotoState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnHalt(PChecker.Actors.ActorId,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnHandleRaisedEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnMonitorRaiseEvent(System.String,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnPopState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnPopStateUnhandledEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnPushState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnRaiseEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnReceiveEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnSendEvent(PChecker.Actors.ActorId,System.String,System.String,System.String,PChecker.Actors.Events.Event,System.Guid,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnStateTransition(PChecker.Actors.ActorId,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnStopTimer(PChecker.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnStrategyDescription(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnRandom(System.Object,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogTextFormatter.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Logging.ActorRuntimeLogXmlFormatter">
            <summary>
            This class implements IActorRuntimeLog and generates log output in an XML format.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogXmlFormatter.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.ActorRuntimeLogXmlFormatter.OnCreateStateMachine(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Logging.IActorRuntimeLog">
            <summary>
            Interface that allows an external module to track what
            is happening in the <see cref="T:PChecker.Actors.IActorRuntime"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnCreateActor(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnCreateStateMachine(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnExecuteAction(PChecker.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of pushed states.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnSendEvent(PChecker.Actors.ActorId,System.String,System.String,System.String,PChecker.Actors.Events.Event,System.Guid,System.Boolean)">
            <summary>
            Invoked when the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="opGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnRaiseEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified state machine raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnEnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnDequeueEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnReceiveEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event,System.Boolean)">
            <summary>
            Invoked when the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The the event being received.</param>
            <param name="wasBlocked">The actor was waiting for one or more specific events,
            and <paramref name="e"/> was one of them</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type)">
            <summary>
            Invoked when the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Invoked when the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnStateTransition(PChecker.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Invoked when the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnGotoState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine performs a goto transition to the specified state.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnPushState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine is being pushed to a state.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnPopState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has popped its current state.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnDefaultEventHandler(PChecker.Actors.ActorId,System.String)">
            <summary>
            Invoked when the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnHalt(PChecker.Actors.ActorId,System.Int32)">
            <summary>
            Invoked when the specified actor has been halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnHandleRaisedEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified actor handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnPopStateUnhandledEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnExceptionThrown(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnExceptionHandled(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnCreateTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnStopTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnCreateMonitor(System.String)">
            <summary>
            Invoked when the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="eventPayload">The event being processed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnMonitorRaiseEvent(System.String,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invoked when the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor finds an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnRandom(System.Object,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic result has been obtained.
            </summary>
            <param name="result">The nondeterministic result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnAssertionFailure(System.String)">
            <summary>
            Invoked when the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnStrategyDescription(System.String,System.String)">
            <summary>
            Invoked to describe the specified scheduling strategy.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.IActorRuntimeLog.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="T:PChecker.Actors.Logging.LogWriter">
            <summary>
            Manages the installed <see cref="T:System.IO.TextWriter"/> and all registered
            <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Logging.LogWriter.Logs">
            <summary>
            The set of registered log writers.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Logging.LogWriter.Logger">
            <summary>
            Used to log messages.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Logging.LogWriter"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogCreateActor(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogCreateStateMachine(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogExecuteAction(PChecker.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Logs that the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of PushStates.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogSendEvent(PChecker.Actors.ActorId,System.String,System.String,System.String,PChecker.Actors.Events.Event,System.Guid,System.Boolean)">
            <summary>
            Logs that the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderState">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="opGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogRaiseEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified actor raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogEnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogDequeueEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogReceiveEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event,System.Boolean)">
            <summary>
            Logs that the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being received.</param>
            <param name="wasBlocked">The state machine was waiting for one or more specific events,
            and <paramref name="e"/> was one of them.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogWaitEvent(PChecker.Actors.ActorId,System.String,System.Type)">
            <summary>
            Logs that the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogWaitEvent(PChecker.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Logs that the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogRandom(System.Object,System.String,System.String)">
            <summary>
            Logs that the specified random result has been obtained.
            </summary>
            <param name="result">The random result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogStateTransition(PChecker.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Logs that the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogGotoState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a goto state transition.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogPushState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a push state transition.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogPopState(PChecker.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a pop state transition.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogHalt(PChecker.Actors.ActorId,System.Int32)">
            <summary>
            Logs that the specified actor has halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogDefaultEventHandler(PChecker.Actors.ActorId,System.String)">
            <summary>
            Logs that the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogHandleRaisedEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified state machine handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogPopStateUnhandledEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogExceptionThrown(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogExceptionHandled(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogCreateTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogStopTimer(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogCreateMonitor(System.String)">
            <summary>
            Logs that the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Logs that the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Logs that the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogMonitorRaiseEvent(System.String,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Logs that the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor has found an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogAssertionFailure(System.String)">
            <summary>
            Logs that the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogStrategyDescription(System.String,System.String)">
            <summary>
            Logs the specified scheduling strategy description.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.LogCompletion">
            <summary>
            Use this method to notify all logs that the test iteration is complete.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.GetLogsOfType``1">
            <summary>
            Returns all registered logs of type <typeparamref name="TActorRuntimeLog"/>,
            if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.SetLogger(System.IO.TextWriter)">
            <summary>
            Use this method to override the default <see cref="T:System.IO.TextWriter"/> for logging messages.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.RegisterLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Logging.LogWriter.RemoveLog(PChecker.Actors.Logging.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/>.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Managers.ActorManager">
            <summary>
            Manages an actor in production.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.ActorManager.Runtime">
            <summary>
            The runtime that executes the actor being managed.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.ActorManager.Instance">
            <summary>
            The actor being managed.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.ActorManager.IsEventHandlerRunning">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.Actors.Managers.ActorManager.OperationGroupId">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.#ctor(PChecker.Actors.ActorRuntime,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Managers.ActorManager"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.GetCachedState">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.IsEventIgnored(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.IsEventDeferred(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.IsDefaultHandlerAvailable">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.OnEnqueueEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.OnReceiveEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.OnReceiveEventWithoutWaiting(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.OnDropEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.ActorManager.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Managers.IActorManager">
            <summary>
            Interface for managing an actor.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.IActorManager.IsEventHandlerRunning">
            <summary>
            True if the event handler of the actor is running, else false.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.IActorManager.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.GetCachedState">
            <summary>
            Returns the cached state of the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.IsEventIgnored(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Checks if the specified event is currently ignored.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.IsEventDeferred(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Checks if the specified event is currently deferred.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is currently available.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnEnqueueEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies the actor that an event has been enqueued.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnRaiseEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies the actor that an event has been raised.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the actor that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnReceiveEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnReceiveEventWithoutWaiting(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive was already in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.OnDropEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <summary>
            Notifies the actor that an event has been dropped.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.IActorManager.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Managers.Mocks.MockActorManager">
            <summary>
            Implements an actor manager that is used during testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockActorManager.Runtime">
            <summary>
            The runtime that executes the actor being managed.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockActorManager.Instance">
            <summary>
            The actor being managed.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.Mocks.MockActorManager.IsEventHandlerRunning">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.Actors.Managers.Mocks.MockActorManager.OperationGroupId">
            <inheritdoc/>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockActorManager.ProgramCounter">
            <summary>
            Program counter used for state-caching. Distinguishes
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockActorManager.IsTransitionStatementCalledInCurrentAction">
            <summary>
            True if a transition statement was called in the current action, else false.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockActorManager.IsInsideOnExit">
            <summary>
            True if the actor is executing an on exit action, else false.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.#ctor(PChecker.SystematicTesting.ControlledRuntime,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Managers.Mocks.MockActorManager"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.GetCachedState">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.IsEventIgnored(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.IsEventDeferred(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.IsDefaultHandlerAvailable">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnEnqueueEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnRaiseEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnReceiveEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnReceiveEventWithoutWaiting(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.OnDropEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockActorManager.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Managers.Mocks.MockStateMachineManager">
            <summary>
            Implements a state machine manager that is used during testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Runtime">
            <summary>
            The runtime that executes the state machine being managed.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Instance">
            <summary>
            The state machine being managed.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.Mocks.MockStateMachineManager.IsEventHandlerRunning">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OperationGroupId">
            <inheritdoc/>
        </member>
        <member name="F:PChecker.Actors.Managers.Mocks.MockStateMachineManager.ProgramCounter">
            <summary>
            Program counter used for state-caching. Distinguishes
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.#ctor(PChecker.SystematicTesting.ControlledRuntime,PChecker.Actors.StateMachine,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Managers.Mocks.MockStateMachineManager"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.GetCachedState">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.IsEventIgnored(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.IsEventDeferred(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.IsDefaultHandlerAvailable">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnEnqueueEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnRaiseEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnReceiveEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnReceiveEventWithoutWaiting(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.OnDropEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.Mocks.MockStateMachineManager.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.Managers.StateMachineManager">
            <summary>
            Manages a state machine in production.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.StateMachineManager.Runtime">
            <summary>
            The runtime that executes the state machine being managed.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Managers.StateMachineManager.Instance">
            <summary>
            The state machine being managed.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Managers.StateMachineManager.IsEventHandlerRunning">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.Actors.Managers.StateMachineManager.OperationGroupId">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.#ctor(PChecker.Actors.ActorRuntime,PChecker.Actors.StateMachine,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Managers.StateMachineManager"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.GetCachedState">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.IsEventIgnored(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.IsEventDeferred(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.IsDefaultHandlerAvailable">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnEnqueueEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnRaiseEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnReceiveEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnReceiveEventWithoutWaiting(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.OnDropEvent(PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.Managers.StateMachineManager.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Actors.NameResolver">
            <summary>
            Utility class for resolving names.
            </summary>
        </member>
        <member name="F:PChecker.Actors.NameResolver.StateNamesCache">
            <summary>
            Cache of state names.
            </summary>
        </member>
        <member name="M:PChecker.Actors.NameResolver.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (i.e. <see cref="T:PChecker.Actors.StateMachine.StateGroup"/>) name of the specified
            state machine or monitor state, or the empty string if there is no such name.
            </summary>
        </member>
        <member name="M:PChecker.Actors.NameResolver.GetStateNameForLogging(System.Type)">
            <summary>
            Returns the state name to be used for logging purposes.
            </summary>
        </member>
        <member name="T:PChecker.Actors.RuntimeFactory">
            <summary>
            Provides methods for creating a <see cref="T:PChecker.Actors.IActorRuntime"/> runtime.
            </summary>
        </member>
        <member name="M:PChecker.Actors.RuntimeFactory.Create">
            <summary>
            Creates a new actor runtime.
            </summary>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one runtime can be created per async local context. This is not a thread-safe operation.
            </remarks>
        </member>
        <member name="M:PChecker.Actors.RuntimeFactory.Create(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new actor runtime with the specified <see cref="T:PChecker.CheckerConfiguration"/>.
            </summary>
            <param name="checkerConfiguration">The runtime checkerConfiguration to use.</param>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one runtime can be created per async local context. This is not a thread-safe operation.
            </remarks>
        </member>
        <member name="T:PChecker.Actors.SendOptions">
            <summary>
            Represents a send event checkerConfiguration that is used during testing.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SendOptions.Default">
            <summary>
            The default send options.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SendOptions.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SendOptions.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SendOptions.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SendOptions.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SendOptions"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SendOptions.ToString">
            <summary>
            A string that represents the current options.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedCounterEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType">
            <summary>
            Supported shared counter operations.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.Value">
            <summary>
            The shared counter value stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.Comparand">
            <summary>
            Comparand value stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.#ctor(PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType,System.Int32,System.Int32,PChecker.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedCounterEvent"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.IncrementEvent">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.Increment"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.DecrementEvent">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.Decrement"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.SetEvent(PChecker.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.GetEvent(PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.AddEvent(PChecker.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.Add"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.CompareExchangeEvent(PChecker.Actors.ActorId,System.Int32,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedCounterEvent.OperationType.CompareExchange"/> operation.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedCounterResponseEvent">
            <summary>
            Event containing the value of a shared counter.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.Events.SharedCounterResponseEvent.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedCounterResponseEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedCounterResponseEvent"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType">
            <summary>
            Supported shared dictionary operations.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.Key">
            <summary>
            The shared dictionary key stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.Value">
            <summary>
            The shared dictionary value stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.ComparisonValue">
            <summary>
            The shared dictionary comparison value stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.Comparer">
            <summary>
            The comparer stored in this event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.#ctor(PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType,System.Object,System.Object,System.Object,PChecker.Actors.ActorId,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.InitializeEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.Initialize"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.TryAddEvent(System.Object,System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.TryAdd"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.TryUpdateEvent(System.Object,System.Object,System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.TryUpdate"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.GetEvent(System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.TryGetEvent(System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.TryGet"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.SetEvent(System.Object,System.Object)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.CountEvent(PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.Count"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.TryRemoveEvent(System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryEvent.OperationType.TryRemove"/> operation.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedDictionaryResponseEvent`1">
            <summary>
            Event containing the value of a shared dictionary.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.Events.SharedDictionaryResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedDictionaryResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedDictionaryResponseEvent`1"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent">
            <summary>
            Event used to communicate with a shared register actor.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.OperationType">
            <summary>
            Supported shared register operations.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.Value">
            <summary>
            The shared register value stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.Func">
            <summary>
            The shared register func stored in this event.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.#ctor(PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.OperationType,System.Object,System.Object,PChecker.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.UpdateEvent(System.Object,PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.OperationType.Update"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.SetEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.GetEvent(PChecker.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:PChecker.Actors.SharedObjects.Events.SharedRegisterEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.Events.SharedRegisterResponseEvent`1">
            <summary>
            Event containing the value of a shared register.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.Events.SharedRegisterResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.Events.SharedRegisterResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.Events.SharedRegisterResponseEvent`1"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedCounter">
            <summary>
            A thread-safe counter that can be shared in-memory by actors.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedCounter.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedCounter"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Create(PChecker.Actors.IActorRuntime,System.Int32)">
            <summary>
            Creates a new shared counter.
            </summary>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedCounter.Mock">
            <summary>
            Mock implementation of <see cref="T:PChecker.Actors.SharedObjects.SharedCounter"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedCounter.Mock.CounterActor">
            <summary>
            Actor modeling the shared counter.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedCounter.Mock.Runtime">
            <summary>
            The controlled runtime hosting this shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.#ctor(System.Int32,PChecker.SystematicTesting.ControlledRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedCounter.Mock"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounter.Mock.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedCounterActor">
            <summary>
            A shared counter modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedCounterActor.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounterActor.OnInitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedCounterActor.ProcessEvent(PChecker.Actors.Events.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedDictionary">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Create``2(PChecker.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},PChecker.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="comparer">The key comparer.</param>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2">
            <summary>
            Mock implementation of <see cref="T:PChecker.Actors.SharedObjects.SharedDictionary`2"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.DictionaryActor">
            <summary>
            Actor modeling the shared dictionary.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.Runtime">
            <summary>
            The controlled runtime hosting this shared dictionary.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.#ctor(PChecker.SystematicTesting.ControlledRuntime,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.SharedDictionary.Mock`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedDictionary`2">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedDictionary`2.Dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.SharedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:PChecker.Actors.SharedObjects.SharedDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedDictionaryActor`2">
            <summary>
            A shared dictionary modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedDictionaryActor`2.Dictionary">
            <summary>
            The internal shared dictionary.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionaryActor`2.OnInitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedDictionaryActor`2.ProcessEvent(PChecker.Actors.Events.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedRegister">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister.Create``1(PChecker.Actors.IActorRuntime,``0)">
            <summary>
            Creates a new shared register.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedRegister.Mock`1">
            <summary>
            Mock implementation of <see cref="T:PChecker.Actors.SharedObjects.SharedRegister`1"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.RegisterActor">
            <summary>
            Actor modeling the shared register.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.Runtime">
            <summary>
            The controlled runtime hosting this shared register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.#ctor(PChecker.SystematicTesting.ControlledRuntime,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedRegister.Mock`1"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister.Mock`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedRegister`1">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedRegister`1.Value">
            <summary>
            Current value of the register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.SharedObjects.SharedRegister`1"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegister`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:PChecker.Actors.SharedObjects.SharedRegisterActor`1">
            <summary>
            A shared register modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:PChecker.Actors.SharedObjects.SharedRegisterActor`1.Value">
            <summary>
            The value of the shared register.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegisterActor`1.OnInitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:PChecker.Actors.SharedObjects.SharedRegisterActor`1.ProcessEvent(PChecker.Actors.Events.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine">
            <summary>
            Type that implements a state machine actor. Inherit from this class to declare
            a custom actor with states, state transitions and event handlers.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.ActionCache">
            <summary>
            Cache of state machine types to a map of action names to action declarations.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different StateMachine types.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.StateTypeCache">
            <summary>
            Cache of state machine types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.StateInstanceCache">
            <summary>
            Cache of state machine types to a set of all available state instances.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.StateStack">
            <summary>
            A stack of states. The state on the top of the stack represents the current state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.InheritableEventHandlerMap">
            <summary>
            A map from event type to a Stack of HandlerInfo where the stack contains the inheritable
            event handlers defined by each state that has been pushed onto the StateStack (if any).
            The HandlerInfo also remembers which state the handler was defined on so that when the
            handler is invoked the IActorRuntimeLog can be given that information.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.EventHandlerMap">
            <summary>
            A map from event type to EventHandlerDeclaration for those EventHandlerDeclarations that
            are not inheritable on the state stack.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.EmptyEventHandlerMap">
            <summary>
            This is just so we don't have to allocate an empty map more than once.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.StateMachineActionMap">
            <summary>
            Map from action names to cached action delegates for all states in this state machine.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.PendingTransition">
            <summary>
            Newly created Transition that hasn't been returned from InvokeActionAsync yet.
            </summary>
        </member>
        <member name="P:PChecker.Actors.StateMachine.CurrentState">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.InitializeAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)">
            <summary>
            Raises the specified <see cref="T:PChecker.Actors.Events.Event"/> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:PChecker.Actors.StateMachine.State"/> and pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:PChecker.Actors.StateMachine.State"/> and pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:PChecker.Actors.StateMachine.State"/>, instead it pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaisePushStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:PChecker.Actors.StateMachine.State"/>, instead it pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaisePopStateEvent">
             <summary>
             Raise a special event that performs a pop state operation at the end of the current action.
             </summary>
             <remarks>
             Popping a state pops the current <see cref="T:PChecker.Actors.StateMachine.State"/> that was pushed using <see cref='M:PChecker.Actors.StateMachine.RaisePushStateEvent(System.Type)'/> or an OnEventPushStateAttribute.
             An assert is raised if there are no states left to pop.
             This event is not handled until the action that calls this method returns control back
             to the runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
             <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:PChecker.Actors.StateMachine.RaiseHaltEvent">
             <summary>
             Raises a <see cref='T:PChecker.Actors.Events.HaltEvent'/> to halt the actor at the end of the current action.
             </summary>
             <remarks>
             This event is not handled until the action that calls this method returns control back
             to the runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
             <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:PChecker.Actors.StateMachine.OnEventHandledAsync(PChecker.Actors.Events.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued
            event, unless the handler of the dequeued event raised an event or caused the actor
            to halt (either normally or due to an exception). Unless this callback raises an
            event, the actor will either become idle or dequeue the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.HandleEventAsync(PChecker.Actors.Events.Event)">
            <summary>
            Handles the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.ExecuteCurrentStateOnEntryAsync(PChecker.Actors.Events.Event)">
            <summary>
            Executes the on entry action of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.ExecuteCurrentStateOnExitAsync(System.String,PChecker.Actors.Events.Event)">
            <summary>
            Executes the on exit action of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.ApplyEventHandlerTransitionAsync(PChecker.Actors.StateMachine.Transition,PChecker.Actors.Events.Event)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the StateMachine.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GotoStateAsync(System.Type,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Performs a goto transition to the specified state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.PushStateAsync(System.Type,PChecker.Actors.Events.Event)">
            <summary>
            Performs a push transition to the specified state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.DoStatePush(PChecker.Actors.StateMachine.State)">
            <summary>
            Configures the state transitions of the state machine when a state is pushed into the stack.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.DoStatePop">
            <summary>
            Configures the state transitions of the state machine
            when a state is popped.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GetInheritedEventHandler(PChecker.Actors.Events.Event,PChecker.Actors.StateMachine.HandlerInfo@)">
            <summary>
            Get the appropriate inherited event handler for the given event.
            </summary>
            <param name="e">The event we want to handle</param>
            <param name="info">The HandlerInfo in the state stack</param>
            <returns>True if a handler is found, otherwise false</returns>
        </member>
        <member name="M:PChecker.Actors.StateMachine.IsEventIgnoredInCurrentState(PChecker.Actors.Events.Event)">
            <summary>
            Checks if the specified event is ignored in the current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.IsEventDeferredInCurrentState(PChecker.Actors.Events.Event)">
            <summary>
            Checks if the specified event is deferred in the current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.IsDefaultHandlerInstalledInCurrentState">
            <summary>
            Checks if a default handler is installed in current state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GetHashedState">
            <summary>
            Returns the hashed state of this state machine.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.SetupEventHandlers">
            <summary>
            Extracts user declarations and setups the event handlers and state transitions.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GetStateTypeAtStackIndex(System.Int32)">
            <summary>
            Returns the type of the state at the specified state
            stack index, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for states.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GetAllStates">
            <summary>
            Returns the set of all states in the state machine (for code coverage).
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the state machine (for code coverage).
            It does not include events that are deferred or ignored.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.AssertStateValidity">
            <summary>
            Checks the state machine for state related errors.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:PChecker.Exceptions.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine.Transition">
            <summary>
            Defines the <see cref="T:PChecker.Actors.StateMachine"/> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/>, <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/>.
            The Transition is processed by the Coyote runtime when
            an event handling method of a StateMachine returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:PChecker.Actors.StateMachine.State"/>.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.Transition.#ctor(PChecker.Actors.StateMachine.Transition.Type,System.Type,PChecker.Actors.Events.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.Transition"/> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:PChecker.Actors.StateMachine"/> transition.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:PChecker.Actors.StateMachine.State"/>.
            This is the value used by <see cref="F:PChecker.Actors.StateMachine.Transition.None"/>.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.RaiseEvent">
            <summary>
            A transition created by <see cref="M:PChecker.Actors.StateMachine.RaiseEvent(PChecker.Actors.Events.Event)"/> that raises an <see cref="F:PChecker.Actors.StateMachine.Transition.Event"/> bypassing
            the <see cref="T:PChecker.Actors.StateMachine.State"/> inbox.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.GotoState">
            <summary>
            A transition created by <see cref="M:PChecker.Actors.StateMachine.RaiseGotoStateEvent``1"/> that pops the current <see cref="T:PChecker.Actors.StateMachine.State"/>
            and pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/> on the
            stack of <see cref="T:PChecker.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.PushState">
            <summary>
            A transition created by <see cref="M:PChecker.Actors.StateMachine.RaisePushStateEvent``1"/> that pushes the specified <see cref="T:PChecker.Actors.StateMachine.State"/>
            on the stack of <see cref="T:PChecker.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.PopState">
            <summary>
            A transition created by <see cref="M:PChecker.Actors.StateMachine.RaisePopStateEvent"/> that pops the current <see cref="T:PChecker.Actors.StateMachine.State"/>
            from the stack of <see cref="T:PChecker.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.Transition.Type.Halt">
            <summary>
            A transition created by <see cref="M:PChecker.Actors.StateMachine.RaiseHaltEvent"/> that halts the <see cref="T:PChecker.Actors.StateMachine"/>.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine.HandlerInfo">
            <summary>
            A struct used to track event handlers that are pushed or popped on the StateStack.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.HandlerInfo.State">
            <summary>
            The state that provided this EventHandler.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.HandlerInfo.StackDepth">
            <summary>
            Records where this State is in the StateStack.  This information is needed to implement WildCardEvent
            semantics.  A specific Handler closest to the top of the stack (higher StackDepth) wins over a
            WildCardEvent further down the stack (lower StackDepth).
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.HandlerInfo.Handler">
            <summary>
            The event handler for a given event Type defined by the State.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State">
            <summary>
            Abstract class representing a state.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="P:PChecker.Actors.StateMachine.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:PChecker.Actors.StateMachine.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.InheritableEventHandlers">
            <summary>
            Map containing all event handler declarations.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.EventHandlers">
            <summary>
            Map containing all non-inheritable event handler declarations.
            </summary>
        </member>
        <member name="P:PChecker.Actors.StateMachine.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InstallPushTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares push event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InheritPushTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits push event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InstallActionBindings(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Installs action bindings, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InheritActionBindings(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action bindings from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InstallDeferHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares defer event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.InheritDeferHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits defer event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.StartAttribute">
            <summary>
            Attribute for declaring the state that a state machine transitions upon creation.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform when entering a state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnEntryAttribute"/> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform when exiting a state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnExitAttribute"/> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring a goto state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
            <param name="actionName">Name of action to perform on exit.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.OnEventPushStateAttribute">
            <summary>
            Attribute for declaring a push state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventPushStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventPushStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnEventPushStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnEventPushStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked when the state machine
            is in the specified state to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.DeferEventsAttribute">
            <summary>
            Attribute for declaring what events should be deferred in a state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.DeferEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.DeferEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.DeferEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in a state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateMachine.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateMachine.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateMachine.State.IgnoreEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:PChecker.Actors.StateMachine.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:PChecker.Actors.StateTransitions.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateTransitions.GotoStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateTransitions.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function that executes after the
            on-exit handler of the exiting state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateTransitions.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateTransitions.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
            <param name="lambda">Lambda function that executes after the on-exit handler of the exiting state.</param>
        </member>
        <member name="M:PChecker.Actors.StateTransitions.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateTransitions.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:PChecker.Actors.StateTransitions.PushStateTransition">
            <summary>
            Defines a push state transition.
            </summary>
        </member>
        <member name="F:PChecker.Actors.StateTransitions.PushStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="M:PChecker.Actors.StateTransitions.PushStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.StateTransitions.PushStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:PChecker.Actors.Timers.ActorTimer">
            <summary>
            A timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Timers.ActorTimer.Info">
            <inheritdoc/>
        </member>
        <member name="F:PChecker.Actors.Timers.ActorTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.ActorTimer.InternalTimer">
            <summary>
            The internal timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.ActorTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.#ctor(PChecker.Actors.Timers.TimerInfo,PChecker.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Timers.ActorTimer"/> class.
            </summary>
            <param name="info">Stores information about this timer.</param>
            <param name="owner">The actor that owns this timer.</param>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.HandleTimeout(System.Object)">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.Equals(PChecker.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:PChecker.Actors.ActorId"/> is equal
            to the current <see cref="T:PChecker.Actors.ActorId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Actors.Timers.ActorTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Timers.IActorTimer">
            <summary>
            Interface of a timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Timers.IActorTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Timers.Mocks.MockStateMachineTimer">
            <summary>
            A mock timer that replaces <see cref="T:PChecker.Actors.Timers.ActorTimer"/> during testing.
            It is implemented as a state machine.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.TimerInfo">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.PChecker#Actors#Timers#IActorTimer#Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Setup(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the timer with the specified checkerConfiguration.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.HandleTimeout">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Equals(PChecker.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:PChecker.Actors.ActorId"/> is equal
            to the current <see cref="T:PChecker.Actors.ActorId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.MockStateMachineTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:PChecker.Actors.Timers.Mocks.TimerSetupEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.TimerSetupEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.TimerSetupEvent.Owner">
            <summary>
            The actor that owns the timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.Mocks.TimerSetupEvent.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.Mocks.TimerSetupEvent.#ctor(PChecker.Actors.Timers.TimerInfo,PChecker.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Timers.Mocks.TimerSetupEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
            <param name="owner">The actor that owns the timer.</param>
        </member>
        <member name="T:PChecker.Actors.Timers.TimerElapsedEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
        </member>
        <member name="P:PChecker.Actors.Timers.TimerElapsedEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerElapsedEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Timers.TimerElapsedEvent"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerElapsedEvent.#ctor(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Timers.TimerElapsedEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
        </member>
        <member name="T:PChecker.Actors.Timers.TimerInfo">
            <summary>
            Stores information about a timer that can send timeout events to its owner actor.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
        </member>
        <member name="F:PChecker.Actors.Timers.TimerInfo.Id">
            <summary>
            The unique id of the timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.TimerInfo.OwnerId">
            <summary>
            The id of the actor that owns the timer.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.TimerInfo.DueTime">
            <summary>
            The amount of time to wait before sending the first timeout event.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.TimerInfo.Period">
            <summary>
            The time interval between timeout events.
            </summary>
        </member>
        <member name="F:PChecker.Actors.Timers.TimerInfo.CustomEvent">
            <summary>
            The optional custom event to raise instead of the default TimerElapsedEvent.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerInfo.#ctor(PChecker.Actors.ActorId,System.TimeSpan,System.TimeSpan,PChecker.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.Timers.TimerInfo"/> class.
            </summary>
            <param name="ownerId">The id of the actor that owns this timer.</param>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of a default TimerElapsedEvent.</param>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerInfo.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:PChecker.Actors.Timers.TimerInfo.Equals(PChecker.Actors.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:PChecker.Actors.Timers.TimerInfo"/> is equal
            to the current <see cref="T:PChecker.Actors.Timers.TimerInfo"/>.
            </summary>
        </member>
        <member name="T:PChecker.Actors.UnitTesting.ActorTestKit`1">
            <summary>
            Provides methods for testing an actor of type <typeparamref name="T"/> in isolation.
            </summary>
            <typeparam name="T">The actor type to test.</typeparam>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorTestKit`1.Runtime">
            <summary>
            The actor testing runtime.
            </summary>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorTestKit`1.ActorInstance">
            <summary>
            The instance of the actor being tested.
            </summary>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorTestKit`1.IsRunning">
            <summary>
            True if the actor has started its execution, else false.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.UnitTesting.ActorTestKit`1"/> class.
            </summary>
            <param name="checkerConfiguration">The runtime checkerConfiguration to use.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.StartActorAsync(PChecker.Actors.Events.Event)">
            <summary>
            Initializes the actor, passes the optional specified event and
            invokes its on-entry handler, if there is one available. This method returns a task that
            completes when the actor reaches quiescence (typically when the event handler
            finishes executing because there are not more events to dequeue, or when the actor
            asynchronously waits to receive an event).  If the actor is a state machine
            it also transitions the actor to its start state.
            </summary>
            <param name="initialEvent">Optional event used during initialization.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.SendEventAsync(PChecker.Actors.Events.Event)">
            <summary>
            Sends an event to the actor and starts its event handler. This method returns
            a task that completes when the actor reaches quiescence (typically when the
            event handler finishes executing because there are not more events to dequeue, or
            when the actor asynchronously waits to receive an event).
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the actor method with the specified name, and passing the specified
            optional parameters. Use this method to invoke private methods of the actor.
            </summary>
            <param name="methodName">The name of the actor method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Invoke(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the actor method with the specified name and parameter types, passing the
            specified optional parameters. Use this method to invoke private methods of the actor.
            </summary>
            <param name="methodName">The name of the actor method.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.InvokeAsync(System.String,System.Object[])">
            <summary>
            Invokes the asynchronous actor method with the specified name, and passing the specified
            optional parameters. Use this method to invoke private methods of the actor.
            </summary>
            <param name="methodName">The name of the actor method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.InvokeAsync(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the asynchronous actor method with the specified name and parameter types, and passing
            the specified optional parameters. Use this method to invoke private methods of the actor.
            </summary>
            <param name="methodName">The name of the actor method.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.GetMethod(System.String,System.Boolean,System.Type[])">
            <summary>
            Uses reflection to get the actor method with the specified name and parameter types.
            </summary>
            <param name="methodName">The name of the actor method.</param>
            <param name="isAsync">True if the method is async, else false.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Assert(System.Boolean)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.AssertStateTransition``1">
            <summary>
            If the actor is a state machine, this asserts that the state machine has transitioned to the state with the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="S">The type of the state.</typeparam>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.AssertStateTransition(System.String)">
            <summary>
            If the actor is a state machine, asserts that the state machine has transitioned to the state with the specified name
            (either <see cref="P:System.Type.FullName"/> or <see cref="P:System.Reflection.MemberInfo.Name"/>).
            </summary>
            <param name="stateName">The name of the state.</param>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.AssertIsWaitingToReceiveEvent(System.Boolean)">
            <summary>
            Asserts that the actor is waiting (or not) to receive an event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorTestKit`1.AssertInboxSize(System.Int32)">
            <summary>
            Asserts that the actor inbox contains the specified number of events.
            </summary>
            <param name="numEvents">The number of events in the inbox.</param>
        </member>
        <member name="T:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime">
            <summary>
            Runtime for testing an actor in isolation.
            </summary>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.Instance">
            <summary>
            The actor being tested.
            </summary>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.ActorInbox">
            <summary>
            The inbox of the actor being tested.
            </summary>
        </member>
        <member name="F:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.QuiescenceCompletionSource">
            <summary>
            Task completion source that completes when the actor being tested reaches quiescence.
            </summary>
        </member>
        <member name="P:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.IsActorWaitingToReceiveEvent">
            <summary>
            True if the actor is waiting to receive and event, else false.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.#ctor(PChecker.CheckerConfiguration,System.Type,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.StartAsync(PChecker.Actors.Events.Event)">
            <summary>
            Starts executing the actor-under-test by transitioning it to its initial state
            and passing an optional initialization event.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorIdFromName(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActor(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActor(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorAndExecuteAsync(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorAndExecuteAsync(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.GetCurrentOperationGroupId(PChecker.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.RunActorEventHandlerAsync(PChecker.Actors.Actor,PChecker.Actors.Events.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            </summary>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.CreateActorTimer(PChecker.Actors.Timers.TimerInfo,PChecker.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.NotifyReceivedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Actors.UnitTesting.ActorUnitTestingRuntime.NotifyWaitEvent(PChecker.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.CheckerConfiguration">
            <summary>
            The Coyote project configurations.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.OutputFilePath">
            <summary>
            The output path.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.Timeout">
            <summary>
            Timeout in seconds.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.AssemblyToBeAnalyzed">
            <summary>
            The assembly to be analyzed for bugs.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.TestCaseName">
            <summary>
            Test case to be used.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.SchedulingStrategy">
            <summary>
            The systematic testing strategy to use.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.TestingIterations">
            <summary>
            Number of testing iterations.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.RandomGeneratorSeed">
            <summary>
            Custom seed to be used by the random value generator. By default,
            this value is null indicating that no seed has been set.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.IncrementalSchedulingSeed">
            <summary>
            If true, the seed will increment in each
            testing iteration.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.PerformFullExploration">
            <summary>
            If true, the Coyote tester performs a full exploration,
            and does not stop when it finds a bug.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for fair schedulers.
            By default this is set to 100,000 steps.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for unfair schedulers.
            By default this is set to 10,000 steps.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.MaxSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for both fair and unfair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.UserExplicitlySetMaxFairSchedulingSteps">
            <summary>
            True if the user has explicitly set the
            fair scheduling steps bound.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.ConsiderDepthBoundHitAsBug">
            <summary>
            If true, then the Coyote tester will consider an execution
            that hits the depth bound as buggy.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.StrategyBound">
            <summary>
            A strategy-specific bound.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.IsLivenessCheckingEnabled">
            <summary>
            If this option is enabled, liveness checking is enabled during bug-finding.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold. If it is 0
            then it is disabled.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.ScheduleFile">
            <summary>
            The schedule file to be replayed.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.ScheduleTrace">
            <summary>
            The schedule trace to be replayed.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.IsVerbose">
            <summary>
            If true, then messages are logged.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.ReportCodeCoverage">
            <summary>
            Enables code coverage reporting of a Coyote program.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.ReportActivityCoverage">
            <summary>
            Enables activity coverage reporting of a Coyote program.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.DebugActivityCoverage">
            <summary>
            Enables activity coverage debugging.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.IsDgmlBugGraph">
            <summary>
            Is DGML graph showing all test iterations or just one "bug" iteration.
            False means all, and True means only the iteration containing a bug.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.IsDgmlGraphEnabled">
            <summary>
            If specified, requests a DGML graph of the iteration that contains a bug, if a bug is found.
            This is different from a coverage activity graph, as it will also show actor instances.
            </summary>
        </member>
        <member name="P:PChecker.CheckerConfiguration.IsXmlLogEnabled">
            <summary>
            Produce an XML formatted runtime log file.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.CustomActorRuntimeLogType">
            <summary>
            If specified, requests a custom runtime log to be used instead of the default.
            This is the AssemblyQualifiedName of the type to load.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.EnableDebugging">
            <summary>
            Enables debugging.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.TestingSchedulerEndPoint">
            <summary>
            The testing scheduler unique endpoint.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.TestingProcessId">
            <summary>
            The unique testing process id.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.AdditionalCodeCoverageAssemblies">
            <summary>
            Additional assembly specifications to instrument for code coverage, besides those in the
            dependency graph between <see cref="F:PChecker.CheckerConfiguration.AssemblyToBeAnalyzed"/> and the Microsoft.Coyote DLLs.
            Key is filename, value is whether it is a list file (true) or a single file (false).
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.EnableColoredConsoleOutput">
            <summary>
            Enables colored console output.
            </summary>
        </member>
        <member name="F:PChecker.CheckerConfiguration.DisableEnvironmentExit">
            <summary>
            If true, then environment exit will be disabled.
            </summary>
        </member>
        <member name="M:PChecker.CheckerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.CheckerConfiguration"/> class.
            </summary>
        </member>
        <member name="M:PChecker.CheckerConfiguration.Create">
            <summary>
            Creates a new checkerConfiguration with default values.
            </summary>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithRandomStrategy">
            <summary>
            Updates the checkerConfiguration to use the random scheduling strategy during systematic testing.
            </summary>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithProbabilisticStrategy(System.UInt32)">
            <summary>
            Updates the checkerConfiguration to use the probabilistic scheduling strategy during systematic testing.
            You can specify a value controlling the probability of each scheduling decision. This value is
            specified as the integer N in the equation 0.5 to the power of N. So for N=1, the probability is
            0.5, for N=2 the probability is 0.25, N=3 you get 0.125, etc. By default, this value is 3.
            </summary>
            <param name="probabilityLevel">The probability level.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithPCTStrategy(System.Boolean,System.UInt32)">
            <summary>
            Updates the checkerConfiguration to use the PCT scheduling strategy during systematic testing.
            You can specify the number of priority switch points, which by default are 10.
            </summary>
            <param name="isFair">If true, use the fair version of PCT.</param>
            <param name="numPrioritySwitchPoints">The nunmber of priority switch points.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithDFSStrategy">
            <summary>
            Updates the checkerConfiguration to use the dfs scheduling strategy during systematic testing.
            </summary>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithReplayStrategy(System.String)">
            <summary>
            Updates the checkerConfiguration to use the replay scheduling strategy during systematic testing.
            This strategy replays the specified schedule trace to reproduce the same execution.
            </summary>
            <param name="scheduleTrace">The schedule trace to be replayed.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithTestingIterations(System.UInt32)">
            <summary>
            Updates the checkerConfiguration with the specified number of iterations to run during systematic testing.
            </summary>
            <param name="iterations">The number of iterations to run.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithMaxSchedulingSteps(System.UInt32)">
            <summary>
            Updates the checkerConfiguration with the specified number of scheduling steps to explore per iteration
            (for both fair and unfair schedulers) during systematic testing.
            </summary>
            <param name="maxSteps">The scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithMaxFairSchedulingSteps(System.UInt32)">
            <summary>
            Updates the checkerConfiguration with the specified number of fair scheduling steps to explore
            per iteration during systematic testing.
            </summary>
            <param name="maxFairSteps">The scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithMaxUnfairSchedulingSteps(System.UInt32)">
            <summary>
            Updates the checkerConfiguration with the specified number of unfair scheduling steps to explore
            per iteration during systematic testing.
            </summary>
            <param name="maxUnfairSteps">The scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithLivenessTemperatureThreshold(System.UInt32)">
            <summary>
            Updates the checkerConfiguration with the specified liveness temperature threshold during systematic testing.
            If this value is 0 it disables liveness checking.
            </summary>
            <param name="threshold">The liveness temperature threshold.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithRandomGeneratorSeed(System.UInt32)">
            <summary>
            Updates the seed used by the random value generator during systematic testing.
            </summary>
            <param name="seed">The seed used by the random value generator.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithVerbosityEnabled(System.Boolean)">
            <summary>
            Updates the checkerConfiguration with verbose output enabled or disabled.
            </summary>
            <param name="isVerbose">If true, then messages are logged.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithActivityCoverageEnabled(System.Boolean)">
            <summary>
            Updates the checkerConfiguration with activity coverage enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables activity coverage.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithDgmlGraphEnabled(System.Boolean)">
            <summary>
            Updates the checkerConfiguration with DGML graph generation enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables DGML graph generation.</param>
        </member>
        <member name="M:PChecker.CheckerConfiguration.WithXmlLogEnabled(System.Boolean)">
            <summary>
            Updates the checkerConfiguration with XML log generation enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables XML log generation.</param>
        </member>
        <member name="T:PChecker.Coverage.ActivityCoverageReporter">
            <summary>
            The Coyote code coverage reporter.
            </summary>
        </member>
        <member name="F:PChecker.Coverage.ActivityCoverageReporter.CoverageInfo">
            <summary>
            Data structure containing information
            regarding testing coverage.
            </summary>
        </member>
        <member name="F:PChecker.Coverage.ActivityCoverageReporter.BuiltInEvents">
            <summary>
            Set of built in events which we hide in the coverage report.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.#ctor(PChecker.Coverage.CoverageInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Coverage.ActivityCoverageReporter"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.EmitVisualizationGraph(System.String)">
            <summary>
            Emits the visualization graph.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.EmitCoverageReport(System.String)">
            <summary>
            Emits the code coverage report.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.GetEventIds(PChecker.Coverage.GraphLink)">
            <summary>
            Return all events represented by this link.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.WriteCoverageText(System.IO.TextWriter)">
            <summary>
            Writes the visualization text.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActivityCoverageReporter.RemoveCoveredEvents(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
            <summary>
            Remove all events from expectedEvent that are found in the graph.
            </summary>
            <param name="expectedEvents">The list of all expected events organized by unique state Id</param>
        </member>
        <member name="T:PChecker.Coverage.EventCoverage">
            <summary>
            This class maintains information about events received and sent from each state of each actor.
            </summary>
        </member>
        <member name="F:PChecker.Coverage.EventCoverage.EventsReceived">
            <summary>
            Map from states to the list of events received by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="F:PChecker.Coverage.EventCoverage.EventsSent">
            <summary>
            Map from states to the list of events sent by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.EventCoverage.GetEventsReceived(System.String)">
            <summary>
            Get list of events received by the given fully qualified state.
            </summary>
            <param name="stateId">The actor qualified state name</param>
        </member>
        <member name="M:PChecker.Coverage.EventCoverage.GetEventsSent(System.String)">
            <summary>
            Get list of events sent by the given state.
            </summary>
            <param name="stateId">The actor qualified state name</param>
        </member>
        <member name="T:PChecker.Coverage.ActorRuntimeLogGraphBuilder">
            <summary>
            Implements the <see cref="T:PChecker.Actors.Logging.IActorRuntimeLog"/> and builds a directed graph
            from the recorded events and state transitions.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Coverage.ActorRuntimeLogGraphBuilder"/> class.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.ActorRuntimeLogGraphBuilder.CollapseMachineInstances">
            <summary>
            Set this boolean to true to get a collapsed graph showing only
            machine types, states and events.  This will not show machine "instances".
            </summary>
        </member>
        <member name="P:PChecker.Coverage.ActorRuntimeLogGraphBuilder.Logger">
            <summary>
            Get or set the underlying logging object.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging" >Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:PChecker.Coverage.ActorRuntimeLogGraphBuilder.Graph">
            <summary>
            Get the Graph object built by this logger.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnCreateActor(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnCreateStateMachine(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnSendEvent(PChecker.Actors.ActorId,System.String,System.String,System.String,PChecker.Actors.Events.Event,System.Guid,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnRaiseEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnEnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnDequeueEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnReceiveEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(PChecker.Actors.ActorId,System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnStateTransition(PChecker.Actors.ActorId,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnExecuteAction(PChecker.Actors.ActorId,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnGotoState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnPushState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnPopState(PChecker.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnHalt(PChecker.Actors.ActorId,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnDefaultEventHandler(PChecker.Actors.ActorId,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnHandleRaisedEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnPopStateUnhandledEvent(PChecker.Actors.ActorId,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionThrown(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionHandled(PChecker.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnCreateTimer(PChecker.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnStopTimer(PChecker.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnCreateMonitor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorRaiseEvent(System.String,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnRandom(System.Object,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnAssertionFailure(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnStrategyDescription(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Coverage.ActorRuntimeLogGraphBuilder.SnapshotGraph(System.Boolean)">
            <summary>
            Return current graph and reset for next iteration.
            </summary>
            <param name="reset">Set to true will reset the graph for the next iteration.</param>
            <returns>The graph.</returns>
        </member>
        <member name="T:PChecker.Coverage.Graph">
            <summary>
            A directed graph made up of Nodes and Links.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.Graph.Nodes">
            <summary>
            Return the current list of nodes (in no particular order).
            </summary>
        </member>
        <member name="P:PChecker.Coverage.Graph.Links">
            <summary>
            Return the current list of links (in no particular order).
            </summary>
        </member>
        <member name="M:PChecker.Coverage.Graph.GetNode(System.String)">
            <summary>
            Get existing node or null.
            </summary>
            <param name="id">The id of the node.</param>
        </member>
        <member name="M:PChecker.Coverage.Graph.GetOrCreateNode(System.String,System.String,System.String)">
            <summary>
            Get existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:PChecker.Coverage.Graph.GetOrCreateNode(PChecker.Coverage.GraphNode)">
            <summary>
            Get existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:PChecker.Coverage.Graph.GetOrCreateLink(PChecker.Coverage.GraphNode,PChecker.Coverage.GraphNode,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get existing link or create a new one connecting the given source and target nodes.
            </summary>
            <returns>The new link or the existing link if it was already defined.</returns>
        </member>
        <member name="M:PChecker.Coverage.Graph.ToString">
            <summary>
            Serialize the graph to a DGML string.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.Graph.WriteDgml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Serialize the graph to DGML.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.Graph.LoadDgml(System.String)">
            <summary>
            Load a DGML file into a new Graph object.
            </summary>
            <param name="graphFilePath">Full path to the DGML file.</param>
            <returns>The loaded Graph object.</returns>
        </member>
        <member name="M:PChecker.Coverage.Graph.Merge(PChecker.Coverage.Graph)">
            <summary>
            Merge the given graph so that this graph becomes a superset of both graphs.
            </summary>
            <param name="other">The new graph to merge into this graph.</param>
        </member>
        <member name="T:PChecker.Coverage.GraphObject">
            <summary>
            A Node of a Graph.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphObject.Attributes">
            <summary>
            Optional list of attributes for the node.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphObject.AttributeLists">
            <summary>
            Optional list of attributes that have a multi-part value.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphObject.AddAttribute(System.String,System.String)">
            <summary>
            Add an attribute to the node.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphObject.AddListAttribute(System.String,System.String)">
            <summary>
            Creates a compound attribute value containing a merged list of unique values.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The new value to add to the unique list.</param>
        </member>
        <member name="T:PChecker.Coverage.GraphNode">
            <summary>
            A Node of a Graph.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphNode.Id">
            <summary>
            The unique Id of the Node within the Graph.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphNode.Label">
            <summary>
            An optional display label for the node (does not need to be unique).
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphNode.Category">
            <summary>
            An optional category for the node
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Coverage.GraphNode"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphNode.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Add additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:PChecker.Coverage.GraphLink">
            <summary>
            A Link represents a directed graph connection between two Nodes.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphLink.Label">
            <summary>
            An optional display label for the link.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphLink.Category">
            <summary>
            An optional category for the link.
            The special category "Contains" is reserved for building groups.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphLink.Source">
            <summary>
            The source end of the link.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphLink.Target">
            <summary>
            The target end of the link.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.GraphLink.Index">
            <summary>
            The optional link index.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphLink.#ctor(PChecker.Coverage.GraphNode,PChecker.Coverage.GraphNode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Coverage.GraphLink"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.GraphLink.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Add additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:PChecker.Coverage.CoverageInfo">
            <summary>
            Class for storing coverage-specific data
            across multiple testing iterations.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.CoverageInfo.Machines">
            <summary>
            Set of known machines.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.CoverageInfo.MachinesToStates">
            <summary>
            Map from machines to set of all states states defined in that machine.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.CoverageInfo.RegisteredEvents">
            <summary>
            Set of (machine + "." + state => registered events). So all events that can
            get us into each state.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.CoverageInfo.CoverageGraph">
            <summary>
            The coverage graph.
            </summary>
        </member>
        <member name="P:PChecker.Coverage.CoverageInfo.EventInfo">
            <summary>
            Information about events sent and received
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Coverage.CoverageInfo"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.IsMachineDeclared(System.String)">
            <summary>
            Checks if the machine type has already been registered for coverage.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.DeclareMachineState(System.String,System.String)">
            <summary>
            Declares a state.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.DeclareStateEvent(System.String,System.String,System.String)">
            <summary>
            Declares a registered state, event pair.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.Merge(PChecker.Coverage.CoverageInfo)">
            <summary>
            Merges the information from the specified coverage info. This is not thread-safe.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.AddState(System.String,System.String)">
            <summary>
            Adds a new state.
            </summary>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.Load(System.String)">
            <summary>
            Load the given Coverage info file.
            </summary>
            <param name="filename">Path to the file to load.</param>
            <returns>The deserialized coverage info.</returns>
        </member>
        <member name="M:PChecker.Coverage.CoverageInfo.Save(System.String)">
            <summary>
            Save the coverage info to the given XML file.
            </summary>
            <param name="serFilePath">The path to the file to create.</param>
        </member>
        <member name="T:PChecker.Exceptions.AssertionFailureException">
            <summary>
            The exception that is thrown by the Coyote runtime upon assertion failure.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:PChecker.Exceptions.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:PChecker.Exceptions.ExecutionCanceledException">
            <summary>
            Exception that is thrown upon cancellation of testing execution by the runtime.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.ExecutionCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.ExecutionCanceledException"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Exceptions.RuntimeException">
            <summary>
            An exception that is thrown by the Coyote runtime.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Exceptions.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Exceptions.RuntimeException"/> class.
            </summary>
        </member>
        <member name="T:PChecker.Instrumentation.CodeCoverageInstrumentation">
            <summary>
            Instruments a binary for code coverage.
            </summary>
        </member>
        <member name="M:PChecker.Instrumentation.CodeCoverageInstrumentation.SetOutputDirectory(PChecker.CheckerConfiguration,System.Boolean)">
            <summary>
            Set the <see cref="F:PChecker.Instrumentation.CodeCoverageInstrumentation.OutputDirectory"/> to either the user-specified <see cref="F:PChecker.CheckerConfiguration.OutputFilePath"/>
            or to a unique output directory name in the same directory as <see cref="F:PChecker.CheckerConfiguration.AssemblyToBeAnalyzed"/>
            and starting with its name.
            </summary>
        </member>
        <member name="T:PChecker.IO.Debugging.Debug">
            <summary>
            Static class implementing debug reporting methods.
            </summary>
        </member>
        <member name="F:PChecker.IO.Debugging.Debug.IsEnabled">
            <summary>
            Checks if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.Write(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.Write(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.WriteLine(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="T:PChecker.IO.Debugging.Error">
            <summary>
            Static class implementing error reporting methods.
            </summary>
        </member>
        <member name="F:PChecker.IO.Debugging.Error.ColorLock">
            <summary>
            If you play with Console.ForegroundColor then you should grab this lock in order
            to avoid color leakage (wrong color becomes set permanently).
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Error.Report(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Error.ReportAndExit(System.String)">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Error.ReportAndExit(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Error.Write(System.ConsoleColor,System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
        </member>
        <member name="M:PChecker.IO.Debugging.Error.Write(System.IO.TextWriter,System.ConsoleColor,System.String)">
            <summary>
            Writes with console color to the specified TextWriter.
            </summary>
        </member>
        <member name="T:PChecker.IO.ErrorReporter">
            <summary>
            Reports errors and warnings to the user.
            </summary>
        </member>
        <member name="F:PChecker.IO.ErrorReporter._checkerConfiguration">
            <summary>
            CheckerConfiguration.
            </summary>
        </member>
        <member name="P:PChecker.IO.ErrorReporter.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="M:PChecker.IO.ErrorReporter.#ctor(PChecker.CheckerConfiguration,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.IO.ErrorReporter"/> class.
            </summary>
        </member>
        <member name="M:PChecker.IO.ErrorReporter.WriteErrorLine(System.String)">
            <summary>
            Reports an error, followed by the current line terminator.
            </summary>
        </member>
        <member name="M:PChecker.IO.ErrorReporter.Write(System.String,System.ConsoleColor)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="T:PChecker.IO.Logging.ConsoleLogger">
            <summary>
            Logger that writes text to the console.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging" >Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:PChecker.IO.Logging.ConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.IO.Logging.ConsoleLogger"/> class.
            </summary>
        </member>
        <member name="P:PChecker.IO.Logging.ConsoleLogger.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the
            output is written.
            </summary>
        </member>
        <member name="M:PChecker.IO.Logging.ConsoleLogger.Write(System.Char)">
            <summary>
            Writes the specified Unicode character value to the standard output stream.
            </summary>
            <param name="value">The Unicode character.</param>
        </member>
        <member name="M:PChecker.IO.Logging.ConsoleLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:PChecker.IO.Logging.ConsoleLogger.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="T:PChecker.IO.Logging.InMemoryLogger">
            <summary>
            Thread safe logger that writes text to an in-memory buffer.
            The buffered text can be extracted using the ToString() method.
            </summary>
        </member>
        <member name="F:PChecker.IO.Logging.InMemoryLogger.Builder">
            <summary>
            Underlying string builder.
            </summary>
        </member>
        <member name="F:PChecker.IO.Logging.InMemoryLogger.Lock">
            <summary>
            Serializes access to the string writer.
            </summary>
        </member>
        <member name="P:PChecker.IO.Logging.InMemoryLogger.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the
            output is written.
            </summary>
        </member>
        <member name="M:PChecker.IO.Logging.InMemoryLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.IO.Logging.InMemoryLogger"/> class.
            </summary>
        </member>
        <member name="M:PChecker.IO.Logging.InMemoryLogger.Write(System.Char)">
            <summary>
            Writes the specified Unicode character value to the standard output stream.
            </summary>
            <param name="value">The Unicode character.</param>
        </member>
        <member name="M:PChecker.IO.Logging.InMemoryLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:PChecker.IO.Logging.InMemoryLogger.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:PChecker.IO.Logging.InMemoryLogger.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="T:PChecker.Random.Generator">
            <summary>
            Represents a pseudo-random value generator, which is an algorithm that produces
            a sequence of values that meet certain statistical requirements for randomness.
            During systematic testing, the generation of random values is controlled, which
            allows the runtime to explore combinations of choices to find bugs.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism" >Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="F:PChecker.Random.Generator.Runtime">
            <summary>
            The runtime associated with this random value generator.
            </summary>
        </member>
        <member name="M:PChecker.Random.Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Random.Generator"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Random.Generator.Create">
            <summary>
            Creates a new pseudo-random value generator.
            </summary>
            <returns>The pseudo-random value generator.</returns>
        </member>
        <member name="M:PChecker.Random.Generator.NextBoolean">
            <summary>
            Returns a random boolean, that can be controlled during testing.
            </summary>
        </member>
        <member name="M:PChecker.Random.Generator.NextBoolean(System.Int32)">
            <summary>
            Returns a random boolean, that can be controlled during testing.
            </summary>
        </member>
        <member name="M:PChecker.Random.Generator.NextInteger(System.Int32)">
            <summary>
            Returns a random integer, that can be controlled during testing.
            </summary>
        </member>
        <member name="T:PChecker.Random.IRandomValueGenerator">
            <summary>
            Interface for random value generators.
            </summary>
        </member>
        <member name="P:PChecker.Random.IRandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:PChecker.Random.IRandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:PChecker.Random.IRandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than maxValue.
            </summary>
            <param name="maxValue">Exclusive upper bound</param>
        </member>
        <member name="M:PChecker.Random.IRandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:PChecker.Random.RandomValueGenerator">
            <summary>
            Basic random value generator that uses the <see cref="T:System.Random"/> generator.
            </summary>
        </member>
        <member name="F:PChecker.Random.RandomValueGenerator.Random">
            <summary>
            Device for generating random numbers.
            </summary>
        </member>
        <member name="F:PChecker.Random.RandomValueGenerator.RandomSeed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="P:PChecker.Random.RandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:PChecker.Random.RandomValueGenerator.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Random.RandomValueGenerator"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Random.RandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:PChecker.Random.RandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than the specified max value.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="M:PChecker.Random.RandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:PChecker.Runtime.CoyoteRuntime">
            <summary>
            Runtime for executing asynchronous operations.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.AsyncLocalInstance">
            <summary>
            Provides access to the runtime associated with each asynchronous control flow.
            </summary>
            <remarks>
            In testing mode, each testing iteration uses a unique runtime instance. To safely
            retrieve it from static methods, we store it in each asynchronous control flow.
            </remarks>
        </member>
        <member name="P:PChecker.Runtime.CoyoteRuntime.Current">
            <summary>
            The currently executing runtime.
            </summary>
        </member>
        <member name="P:PChecker.Runtime.CoyoteRuntime.IsExecutionControlled">
            <summary>
            If true, the program execution is controlled by the runtime to
            explore interleavings and sources of nondeterminism, else false.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.CheckerConfiguration">
            <summary>
            The checkerConfiguration used by the runtime.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.ValueGenerator">
            <summary>
            Responsible for generating random values.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.OperationIdCounter">
            <summary>
            Monotonically increasing operation id counter.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.CoyoteRuntime.IsRunning">
            <summary>
            Records if the runtime is running.
            </summary>
        </member>
        <member name="P:PChecker.Runtime.CoyoteRuntime.Logger">
            <summary>
            Used to log text messages. Use <see cref="M:PChecker.Runtime.CoyoteRuntime.SetLogger(System.IO.TextWriter)"/>
            to replace the logger with a custom one.
            </summary>
        </member>
        <member name="E:PChecker.Runtime.CoyoteRuntime.OnFailure">
            <summary>
            Callback that is fired when the Coyote program throws an exception which includes failed assertions.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.#ctor(PChecker.CheckerConfiguration,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Runtime.CoyoteRuntime"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Monitor``1(PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during
            analysis or testing. The value is used to generate an integer in
            the range [0..maxValue).
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.GetNextOperationId">
            <summary>
            Returns the next available unique operation id.
            </summary>
            <returns>Value representing the next available unique operation id.</returns>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:PChecker.Specifications.Monitors.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Monitor(System.Type,PChecker.Actors.Events.Event,System.String,System.String,System.String)">
            <summary>
            Invokes the specified <see cref="T:PChecker.Specifications.Monitors.Monitor"/> with the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.AssignAsyncControlFlowRuntime(PChecker.Runtime.CoyoteRuntime)">
            <summary>
            Assigns the specified runtime as the default for the current asynchronous control flow.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.SetLogger(System.IO.TextWriter)">
            <summary>
            Use this method to override the default <see cref="T:System.IO.TextWriter"/> for logging messages.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:PChecker.Runtime.CoyoteRuntime.OnFailure"/> event with the specified <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception
            containing the specified exception.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Stop">
            <summary>
            Terminates the runtime and notifies each active actor to halt execution.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.CoyoteRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:PChecker.Runtime.ICoyoteRuntime">
            <summary>
            Interface that exposes base runtime methods for Coyote.
            </summary>
        </member>
        <member name="P:PChecker.Runtime.ICoyoteRuntime.Logger">
            <summary>
            Used to log messages. Use <see cref="M:PChecker.Runtime.ICoyoteRuntime.SetLogger(System.IO.TextWriter)"/>
            to replace the logger with a custom one.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging" >Logging</see> for more information.
            </remarks>
        </member>
        <member name="E:PChecker.Runtime.ICoyoteRuntime.OnFailure">
            <summary>
            Callback that is fired when the runtime throws an exception which includes failed assertions.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Monitor``1(PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:PChecker.Actors.Events.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism" >Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism" >Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic integer choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism" >Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.SetLogger(System.IO.TextWriter)">
            <summary>
            Use this method to override the default <see cref="T:System.IO.TextWriter"/> for logging messages.
            </summary>
            <param name="logger">The logger to install.</param>
            <returns>The previously installed logger.</returns>
        </member>
        <member name="M:PChecker.Runtime.ICoyoteRuntime.Stop">
            <summary>
            Terminates the runtime and notifies each active actor to halt execution.
            </summary>
        </member>
        <member name="T:PChecker.Runtime.OnFailureHandler">
            <summary>
            Handles the <see cref="E:PChecker.Runtime.ICoyoteRuntime.OnFailure"/> event.
            </summary>
        </member>
        <member name="T:PChecker.Runtime.RuntimeFactory">
            <summary>
            Provides methods for creating a <see cref="T:PChecker.Runtime.ICoyoteRuntime"/> runtime.
            </summary>
        </member>
        <member name="P:PChecker.Runtime.RuntimeFactory.InstalledRuntime">
            <summary>
            The installed runtime instance.
            </summary>
        </member>
        <member name="F:PChecker.Runtime.RuntimeFactory.SyncObject">
            <summary>
            Protects access to the installed runtime.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.RuntimeFactory.Create">
            <summary>
            Creates a new Coyote runtime.
            </summary>
            <returns>The created task runtime.</returns>
            <remarks>
            Only one task runtime can be created per process. If you create a new task
            runtime it replaces the previously installed one.
            </remarks>
        </member>
        <member name="M:PChecker.Runtime.RuntimeFactory.Create(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:PChecker.CheckerConfiguration"/>.
            </summary>
            <param name="checkerConfiguration">The runtime checkerConfiguration to use.</param>
            <returns>The created task runtime.</returns>
            <remarks>
            Only one task runtime can be created per process. If you create a new task
            runtime it replaces the previously installed one.
            </remarks>
        </member>
        <member name="M:PChecker.Runtime.RuntimeFactory.CreateAndInstall(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:PChecker.CheckerConfiguration"/> and sets
            it as the installed runtime, or returns the installed runtime if it already exists.
            </summary>
        </member>
        <member name="M:PChecker.Runtime.RuntimeFactory.CreateWithConfiguration(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:PChecker.CheckerConfiguration"/>.
            </summary>
        </member>
        <member name="T:PChecker.Scheduling.TestingProcessScheduler">
            <summary>
            Testing Process that handles the scheduler
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler._checkerConfiguration">
            <summary>
            CheckerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.Terminating">
            <summary>
            Records if we want certain child test processes to terminate, this key here is the
            SmartSocketClient Name.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.TestReports">
            <summary>
            The test reports per process.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.traceFiles">
            <summary>
            Test Trace files.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.GlobalTestReport">
            <summary>
            The global test report, which contains merged information
            from the test report of each testing process.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.Profiler">
            <summary>
            The testing profiler.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.SchedulerLock">
            <summary>
            The scheduler lock.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.IsProcessCanceled">
            <summary>
            Set if ctrl-c or ctrl-break occurred.
            </summary>
        </member>
        <member name="F:PChecker.Scheduling.TestingProcessScheduler.IsVerbose">
            <summary>
            Whether to write verbose output.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Scheduling.TestingProcessScheduler"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.Create(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new testing process scheduler.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.Run">
            <summary>
            Runs the Coyote testing scheduler.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.CreateAndRunInMemoryTestingProcess">
            <summary>
            Creates and runs an in-memory testing process.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.MergeTestReport(PChecker.SystematicTesting.TestReport,System.UInt32)">
            <summary>
            Merges the test report from the specified process.
            </summary>
        </member>
        <member name="M:PChecker.Scheduling.TestingProcessScheduler.EmitTestReport">
            <summary>
            Emits the test report.
            </summary>
        </member>
        <member name="T:PChecker.SmartSockets.SmartSocketClient">
            <summary>
            This class wraps the Socket class providing some useful semantics like FindServerAsync
            which looks for the UDP message broadcast by the SmartSocketServer. It also provides a
            useful SendReceiveAsync message that synchronously waits for a response from the server.
            It also supports serializing custom message objects via the DataContractSerializer using
            known types provided in your SmartSocketTypeResolver.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.FindServerAsync(System.String,System.String,PChecker.SmartSockets.SmartSocketTypeResolver,System.Threading.CancellationToken,System.String,System.Int32)">
            <summary>
            Find a SmartSocketServer on the local network using UDP broadcast. This will block
            waiting for a server to respond or until you cancel using the CancellationToken.
            </summary>
            <returns>The connected client or null if task is cancelled.</returns>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.OpenBackChannel(System.EventHandler{PChecker.SmartSockets.SmartSocketClient})">
            <summary>
            Create another socket that will allow the server to send messages to the client any time.
            It is expected you will start a ReceiveAsync loop on this server object to process
            those messages.
            </summary>
            <param name="connectedHandler">An event handler to invoke when the server opens the back channel</param>
            <returns>New server object that will get one ClientConnected event when the remote server connects</returns>
        </member>
        <member name="P:PChecker.SmartSockets.SmartSocketClient.BackChannel">
            <summary>
            If OpenBackChannel is called, and the server supports it then this property will
            be defined when that channel is connected.
            </summary>
        </member>
        <member name="E:PChecker.SmartSockets.SmartSocketClient.Error">
            <summary>
            This event is raised if a socket error is detected.
            </summary>
        </member>
        <member name="E:PChecker.SmartSockets.SmartSocketClient.Disconnected">
            <summary>
            This even is raised if the socket is disconnected.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.SendReceiveAsync(PChecker.SmartSockets.SocketMessage)">
            <summary>
            Send a message back to the client.
            </summary>
            <returns>The response message</returns>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.SendAsync(PChecker.SmartSockets.SocketMessage)">
            <summary>
            Send a message and do not wait for a response.
            </summary>
            <returns>The response message</returns>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.ReceiveAsync">
            <summary>
            Receive one message from the socket. This call blocks until a message has arrived.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketClient.Finalize">
            <inheritdoc />
        </member>
        <member name="T:PChecker.SmartSockets.SmartSocketServer">
            <summary>
            This class sets up a UDP broadcaster so clients on the same network can find the server by
            a given string name, no fussing about with ip addresses and ports.It then listens for
            new clients to connect and spins off ClientConnected messages so your app can process the
            server side of each conversation.Your application server then can handle any number of
            clients at the same time, each client will have their own SmartSocketClient on different ports.
            If the client goes away, the ClientDisconnected event is raised so the server can cleanup.
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SmartSocketServer.GroupAddress">
            <summary>
            Address for UDP group.
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SmartSocketServer.GroupPort">
            <summary>
            Port used for UDP broadcasts.
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SmartSocketServer.EndPoint">
            <summary>
            The end point we are listening on (valid after calling StartServer)
            </summary>
        </member>
        <member name="E:PChecker.SmartSockets.SmartSocketServer.ClientConnected">
            <summary>
            Raised when a new client is connected
            </summary>
        </member>
        <member name="E:PChecker.SmartSockets.SmartSocketServer.ClientDisconnected">
            <summary>
            Raised when the given client disconnects
            </summary>
        </member>
        <member name="E:PChecker.SmartSockets.SmartSocketServer.BackChannelOpened">
            <summary>
            Raised when client requests a back channel for server to communicate independently with the client
            The given SmartSocketClient will have a BackChannel property set to a new SmartSocketClient that
            the server can use to send messages to the client.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketServer.#ctor(System.String,PChecker.SmartSockets.SmartSocketTypeResolver,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SmartSockets.SmartSocketServer"/> class.
            Construct a new SmartSocketServer.
            </summary>
            <param name="name">The name the client will check in UDP broadcasts to make sure it is connecting to the right server</param>
            <param name="resolver">A way of providing custom Message types for serialization</param>
            <param name="ipAddress">An optional ipAddress so you can decide which network interface to use</param>
            <param name="udpGroupAddress"></param>
            <param name="udpGroupPort"></param>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketServer.StartServer(System.String,PChecker.SmartSockets.SmartSocketTypeResolver,System.String,System.String,System.Int32)">
            <summary>
            Start a new server that listens for connections from anyone.
            </summary>
            <param name="name">The unique name of the server</param>
            <param name="resolver">For resolving custom message types received from the client</param>
            <param name="ipAddress">Determines which local network interface to use</param>
            <param name="udpGroupAddress">Optional request to setup UDP listener, pass null if you don't want that</param>
            <param name="udpGroupPort">Optional port required if you provide udpGroupAddress</param>
            <returns>Returns the new server object</returns>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketServer.StartListening">
            <summary>
            Start listening for connections from anyone.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketServer.Run">
            <summary>
            Call this method on a background thread to listen to our port.
            </summary>
        </member>
        <member name="M:PChecker.SmartSockets.SmartSocketServer.Stop">
            <summary>
            Call this method to stop the background thread, it is good to do this before your app shuts down.
            This will also send a Disconnect message to all the clients so they know the server is gone.
            </summary>
        </member>
        <member name="T:PChecker.SmartSockets.SocketMessage">
            <summary>
            This is the base class for messages send over SmartSockets.
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SocketMessage.Id">
            <summary>
            This is like a message type, class of message or are completely unique id.
            It's up to you how you want to use it.
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SocketMessage.Sender">
            <summary>
            This will be filled automatically by the SmartSocket class so you
            </summary>
        </member>
        <member name="P:PChecker.SmartSockets.SocketMessage.Message">
            <summary>
            An optional string message
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.CachedDelegate">
            <summary>
            A monitor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor">
            <summary>
            Abstract class representing a specification monitor.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.StateTypeMap">
            <summary>
            Map from monitor types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.StateMap">
            <summary>
            Map from monitor types to a set of all available states.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.MonitorActionMap">
            <summary>
            Map from monitor types to a set of all available actions.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Runtime">
            <summary>
            The runtime that executes this monitor.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.ActiveState">
            <summary>
            The active monitor state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.EventHandlers">
            <summary>
            Dictionary containing all the current action bindings.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.ActionMap">
            <summary>
            Map from action names to cached action delegates.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.IgnoredEvents">
            <summary>
            Set of currently ignored event types.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution,
            as long as the monitor remains in a hot state. If the
            temperature reaches the specified limit, then a potential
            liveness bug has been found.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.Name">
            <summary>
            Gets the name of this monitor.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.Logger">
            <summary>
            The logger installed to the runtime.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging" >Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.CurrentStateName">
            <summary>
            Gets the current state name.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.CurrentStateNameWithTemperature">
            <summary>
            Gets the current state name with temperature.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.HashedState">
            <summary>
            User-defined hashed state of the monitor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.PendingTransition">
            <summary>
            A pending transition object that has not been returned from ExecuteAction yet.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.Initialize(PChecker.Actors.ActorRuntime)">
            <summary>
            Initializes this monitor.
            </summary>
            <param name="runtime">The runtime that executes this monitor.</param>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)">
            <summary>
            Raises the specified <see cref="T:PChecker.Actors.Events.Event"/> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1">
             <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
             <remarks>
             Goto state pops the current <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> and pushes the specified <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
             <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent(System.Type)">
             <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
             <remarks>
             Goto state pops the current <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> and pushes the specified <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)"/>, <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
             <param name="state">Type of the state.</param>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.MonitorEvent(PChecker.Actors.Events.Event,System.String,System.String,System.String)">
            <summary>
            Notifies the monitor to handle the received event.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.HandleEvent(PChecker.Actors.Events.Event)">
            <summary>
            Handles the given event.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.IsEventIgnoredInCurrentState(PChecker.Actors.Events.Event)">
            <summary>
            Checks if the specified event is ignored in the current monitor state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.Do(System.String,PChecker.Actors.Events.Event)">
            <summary>
            Invokes an action.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ExecuteCurrentStateOnEntry(PChecker.Actors.Events.Event)">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ExecuteCurrentStateOnExit(System.String,PChecker.Actors.Events.Event)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ExecuteAction(PChecker.Specifications.Monitors.CachedDelegate,PChecker.Actors.Events.Event)">
            <summary>
            Executes the specified action.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ApplyEventHandlerTransition(PChecker.Specifications.Monitors.Monitor.Transition)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the Monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GotoState(System.Type,System.String,PChecker.Actors.Events.Event)">
            <summary>
            Performs a goto transition to the given state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.CanHandleEvent(System.Type)">
            <summary>
            Checks if the state can handle the given event type. An event
            can be handled if it is deferred, or leads to a transition or
            action binding.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.CheckLivenessTemperature(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.IsInHotState">
            <summary>
            Returns true if the monitor is in a hot state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.IsInHotState(System.String@)">
            <summary>
            Returns true if the monitor is in a hot state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.IsInColdState">
            <summary>
            Returns true if the monitor is in a cold state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.IsInColdState(System.String@)">
            <summary>
            Returns true if the monitor is in a cold state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GetHotState">
            <summary>
            Returns a nullable boolean indicating liveness temperature: true for hot, false for cold, else null.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GetHashedState">
            <summary>
            Returns the hashed state of this monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ToString">
            <summary>
            Returns a string that represents the current monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GotoStartState">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.InitializeStateInformation">
            <summary>
            Initializes information about the states of the monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for monitor states.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ConfigureStateTransitions(PChecker.Specifications.Monitors.Monitor.State)">
            <summary>
            Configures the state transitions of the monitor.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.AssertStateValidity">
            <summary>
            Check monitor for state related errors.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:PChecker.Exceptions.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GetAllStates">
            <summary>
            Returns the set of all states in the monitor (for code coverage).
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the monitor (for code coverage).
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.Transition">
            <summary>
            Defines the <see cref="T:PChecker.Specifications.Monitors.Monitor"/> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1"/>, or <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)"/>.
            The Transition is processed by the Coyote runtime when
            an event handling method returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/>.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.Transition.#ctor(PChecker.Specifications.Monitors.Monitor.Transition.Type,System.Type,PChecker.Actors.Events.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.Transition"/> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:PChecker.Specifications.Monitors.Monitor"/> transition.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/>.
            This is the value used by <see cref="F:PChecker.Specifications.Monitors.Monitor.Transition.None"/>.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.Type.Raise">
            <summary>
            A transition created by <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseEvent(PChecker.Actors.Events.Event)"/> that raises an <see cref="F:PChecker.Specifications.Monitors.Monitor.Transition.Event"/> bypassing
            the <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> inbox.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.Transition.Type.Goto">
            <summary>
            A transition created by <see cref="M:PChecker.Specifications.Monitors.Monitor.RaiseGotoStateEvent``1"/> from the current <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/>
            to the specified <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/>.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State">
            <summary>
            Abstract class representing a state.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.EventHandlers">
            <summary>
            Dictionary containing all the event handlers.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.State.IsHot">
            <summary>
            Returns true if this is a hot state.
            </summary>
        </member>
        <member name="P:PChecker.Specifications.Monitors.Monitor.State.IsCold">
            <summary>
            Returns true if this is a cold state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InstallActionHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares action event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InheritActionHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.StartAttribute">
            <summary>
            Attribute for declaring that a state of a monitor
            is the start one.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform
            when entering a monitor state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.OnEntryAttribute"/> class.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform
            when exiting a monitor state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.OnExitAttribute"/> class.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring which state a monitor should transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
            <param name="actionName">Name of action to perform on exit</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring what action a monitor should perform
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEventDoActionAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.OnEventDoActionAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in
            a monitor state.
            </summary>
        </member>
        <member name="F:PChecker.Specifications.Monitors.Monitor.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Monitors.Monitor.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Specifications.Monitors.Monitor.State.IgnoreEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.ColdAttribute">
            <summary>
            Attribute for declaring a cold monitor state. A monitor that
            is in a cold state satisfies a liveness property.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.State.HotAttribute">
            <summary>
            Attribute for declaring a hot monitor state. A monitor that
            is in a hot state violates a liveness property.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Monitors.Monitor.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:PChecker.Specifications.Specification">
            <summary>
            Provides static methods that are useful for writing specifications
            and interacting with the systematic testing engine.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="M:PChecker.Specifications.Specification.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Specification.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:PChecker.Exceptions.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:PChecker.Specifications.Specification.RegisterMonitor``1">
            <summary>
            Registers a new safety or liveness monitor.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:PChecker.Specifications.Specification.Monitor``1(PChecker.Actors.Events.Event)">
            <summary>
            Invokes the specified monitor with the given event.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="T:PChecker.SystematicTesting.ControlledRuntime">
            <summary>
            Runtime for controlling asynchronous operations.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.ControlledRuntime.Current">
            <summary>
            The currently executing runtime.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.ControlledRuntime.Scheduler">
            <summary>
            The asynchronous operation scheduler.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.ControlledRuntime.TaskController">
            <summary>
            Responsible for controlling the execution of tasks.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.ControlledRuntime.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.ControlledRuntime.NameValueToActorId">
            <summary>
            Map that stores all unique names and their corresponding actor ids.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.ControlledRuntime.RootTaskId">
            <summary>
            The root task id.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.#ctor(PChecker.CheckerConfiguration,PChecker.SystematicTesting.Strategies.ISchedulingStrategy,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.ControlledRuntime"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorIdFromName(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorAndExecuteAsync(System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorAndExecuteAsync(System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,PChecker.Actors.Events.Event,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetCurrentOperationGroupId(PChecker.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.RunTest(System.Delegate,System.String)">
            <summary>
            Runs the specified test method.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:PChecker.Actors.Events.Event"/>. This event
            can only be used to access its payload, and cannot be handled. The method returns only
            when the actor is initialized and the <see cref="T:PChecker.Actors.Events.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorAndExecuteAsync(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActor(PChecker.Actors.ActorId,System.Type,System.String,PChecker.Actors.Actor,System.Guid)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.SendEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.SendEventAndExecuteAsync(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.EnqueueEvent(PChecker.Actors.ActorId,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions,PChecker.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.EnqueueEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Actor,System.Guid,PChecker.Actors.SendOptions)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.RunActorEventHandler(PChecker.Actors.Actor,PChecker.Actors.Events.Event,System.Boolean,PChecker.Actors.Actor)">
            <summary>
            Runs a new asynchronous event handler for the specified actor.
            This is a fire and forget invocation.
            </summary>
            <param name="actor">The actor that executes this event handler.</param>
            <param name="initialEvent">Optional event for initializing the actor.</param>
            <param name="isFresh">If true, then this is a new actor.</param>
            <param name="syncCaller">Caller actor that is blocked for quiscence.</param>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.ProcessUnhandledExceptionInOperation(PChecker.SystematicTesting.Operations.AsyncOperation,System.Exception)">
            <summary>
            Processes an unhandled exception in the specified asynchronous operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CreateActorTimer(PChecker.Actors.Timers.TimerInfo,PChecker.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.TryCreateMonitor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Monitor(System.Type,PChecker.Actors.Events.Event,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Assert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.AssertExpectedCallerActor(PChecker.Actors.Actor,System.String)">
            <summary>
            Asserts that the actor calling an actor method is also
            the actor that is currently executing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.CheckNoMonitorInHotStateAtTermination">
            <summary>
            Checks that no monitor is in a hot state upon program termination.
            If the program is still running, then this method returns without
            performing a check.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetExecutingOperation``1">
            <summary>
            Gets the <see cref="T:PChecker.SystematicTesting.Operations.IAsyncOperation"/> that is executing on the current
            synchronization context, or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.ScheduleNextOperation">
            <summary>
            Schedules the next controlled asynchronous operation. This method
            is only used during testing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyInvokedAction(PChecker.Actors.Actor,System.Reflection.MethodInfo,System.String,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyDequeuedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyDefaultEventDequeued(PChecker.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyDefaultEventHandlerCheck(PChecker.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyRaisedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyHandleRaisedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyReceiveCalled(PChecker.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyReceivedEvent(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyReceivedEventWithoutWaiting(PChecker.Actors.Actor,PChecker.Actors.Events.Event,PChecker.Actors.Events.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyWaitTask(PChecker.Actors.Actor,System.Threading.Tasks.Task)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyWaitEvent(PChecker.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyEnteredState(PChecker.Actors.StateMachine)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyExitedState(PChecker.Actors.StateMachine)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyPopState(PChecker.Actors.StateMachine)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyInvokedOnEntryAction(PChecker.Actors.StateMachine,System.Reflection.MethodInfo,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyInvokedOnExitAction(PChecker.Actors.StateMachine,System.Reflection.MethodInfo,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyEnteredState(PChecker.Specifications.Monitors.Monitor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyExitedState(PChecker.Specifications.Monitors.Monitor)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyInvokedAction(PChecker.Specifications.Monitors.Monitor,System.Reflection.MethodInfo,System.String,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.NotifyRaisedEvent(PChecker.Specifications.Monitors.Monitor,PChecker.Actors.Events.Event)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetCoverageInfo">
            <summary>
            Get the coverage graph information (if any). This information is only available
            when <see cref="P:PChecker.CheckerConfiguration.ReportActivityCoverage"/> is enabled.
            </summary>
            <returns>A new CoverageInfo object.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.ReportActivityCoverageOfActor(PChecker.Actors.Actor)">
            <summary>
            Reports actors that are to be covered in coverage report.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.ReportActivityCoverageOfMonitor(PChecker.Specifications.Monitors.Monitor)">
            <summary>
            Reports coverage for the specified monitor.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.ResetProgramCounter(PChecker.Actors.Actor)">
            <summary>
            Resets the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.GetProgramState">
            <summary>
            Returns the current hashed state of the execution using the specified
            level of abstraction. The hash is updated in each execution step.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.WaitAsync">
            <summary>
            Waits until all actors have finished execution.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.RaiseOnFailureEvent(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.ControlledRuntime.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Operations.ActorOperation">
            <summary>
            Contains information about an asynchronous actor operation
            that can be controlled during testing.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.ActorOperation.Actor">
            <summary>
            The actor that executes this operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.ActorOperation.Id">
            <summary>
            Unique id of the operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.ActorOperation.Name">
            <summary>
            Unique name of the operation.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.ActorOperation.EventDependencies">
            <summary>
            Set of events that this operation is waiting to receive. Receiving
            any event in the set allows this operation to resume.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.ActorOperation.SkipNextReceiveSchedulingPoint">
            <summary>
            True if it should skip the next receive scheduling point,
            because it was already called in the end of the previous
            event handler.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.ActorOperation.#ctor(PChecker.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Operations.ActorOperation"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.ActorOperation.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Invoked when the operation is waiting to receive an event of the specified type or types.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.ActorOperation.OnReceivedEvent">
            <summary>
            Invoked when the operation received an event from the specified operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.ActorOperation.OnCompleted">
            <summary>
            Invoked when the operation completes.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Operations.AsyncOperation">
            <summary>
            An abstract asynchronous operation that can be controlled during testing.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.AsyncOperation.Id">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.AsyncOperation.Name">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.AsyncOperation.Status">
            <inheritdoc/>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.AsyncOperation.HashedProgramState">
            <summary>
            A value that represents the hashed program state when
            this operation last executed.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperation.IsActive">
            <summary>
            Is the source of the operation active.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperation.IsHandlerRunning">
            <summary>
            True if the handler of the source of the operation is running, else false.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperation.IsAwaiterControlled">
            <summary>
            True if the next awaiter is controlled, else false.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Operations.AsyncOperation"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.OnEnabled">
            <summary>
            Invoked when the operation has been enabled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.OnCompleted">
            <summary>
            Invoked when the operation completes.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.TryEnable">
            <summary>
            Tries to enable the operation, if it was not already enabled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.AsyncOperation.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Operations.AsyncOperationStatus">
            <summary>
            The status of an asynchronous operation.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.None">
            <summary>
            The operation does not have a status yet.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.Enabled">
            <summary>
            The operation is enabled.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.BlockedOnWaitAll">
            <summary>
            The operation is waiting for all of its dependencies to complete.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.BlockedOnWaitAny">
            <summary>
            The operation is waiting for any of its dependencies to complete.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.BlockedOnReceive">
            <summary>
            The operation is waiting to receive an event.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.BlockedOnResource">
            <summary>
            The operation is waiting to acquire a resource.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.Completed">
            <summary>
            The operation is completed.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.Canceled">
            <summary>
            The operation is canceled.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Operations.IAsyncOperation">
            <summary>
            Interface of an asynchronous operation that can be controlled during testing.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.IAsyncOperation.Id">
            <summary>
            The unique id of the operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.IAsyncOperation.Name">
            <summary>
            The unique name of the operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.IAsyncOperation.Status">
            <summary>
            The status of the operation. An operation can be scheduled only
            if it is <see cref="F:PChecker.SystematicTesting.Operations.AsyncOperationStatus.Enabled"/>.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.IAsyncOperation.HashedProgramState">
            <summary>
            A value that represents the hashed program state when
            this operation last executed.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Operations.TaskOperation">
            <summary>
            Contains information about an asynchronous task operation
            that can be controlled during testing.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.TaskOperation.AsyncTaskMethodCache">
            <summary>
            A cache from async controlled task state machine types generated by
            the compiler to the corresponding asynchronous methods.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.TaskOperation.Scheduler">
            <summary>
            The scheduler executing this operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.TaskOperation.Id">
            <summary>
            The unique id of the operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Operations.TaskOperation.Name">
            <summary>
            The unique name of the operation.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.TaskOperation.JoinDependencies">
            <summary>
            Set of tasks that this operation is waiting to join. All tasks
            in the set must complete before this operation can resume.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.TaskOperation.RootAsyncTaskMethod">
            <summary>
            The root asynchronous method that is executed by this operation.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Operations.TaskOperation.CurrAsyncTaskMethod">
            <summary>
            The asynchronous method that is current executed by this operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.#ctor(System.UInt64,PChecker.SystematicTesting.OperationScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Operations.TaskOperation"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.OnWaitTask(System.Threading.Tasks.Task)">
            <summary>
            Invoked when the operation is waiting to join the specified task.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.OnWaitTasks(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task},System.Boolean)">
            <summary>
            Invoked when the operation is waiting to join the specified tasks.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.TryEnable">
            <summary>
            Tries to enable the operation, if it was not already enabled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.SetRootAsyncTaskStateMachine(System.Type)">
            <summary>
            Sets the root asynchronous controlled task state machine
            of this operation, if it is not already set.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.SetExecutingAsyncTaskStateMachineType(System.Type)">
            <summary>
            Sets the asynchronous controlled task state machine with the specified type
            as the currently executed by this operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.IsExecutingInRootAsyncMethod">
            <summary>
            Checks if the operation is currently executing the root asynchronous method.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.GetAsyncTaskMethodComponents(System.Type)">
            <summary>
            Returns a tuple containing the name and declaring type of the asynchronous controlled
            task method with the specified type.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Operations.TaskOperation.TryGetUserDefinedAsyncMethodFromStackFrame(System.Diagnostics.StackFrame,System.Type,System.Reflection.MethodBase@)">
            <summary>
            Tries to get the user defined asynchronous method from the specified stack frame and
            asynchronous state machine type, if there is one, else returns false.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.OperationScheduler">
            <summary>
            Implements a scheduler that serializes and schedules controlled operations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.CheckerConfiguration">
            <summary>
            The checkerConfiguration used by the scheduler.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.Runtime">
            <summary>
            The controlled runtime.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.Strategy">
            <summary>
            The scheduling strategy used for program exploration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.OperationMap">
            <summary>
            Map from unique ids to asynchronous operations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.ControlledTaskMap">
            <summary>
            Map from ids of tasks that are controlled by the runtime to operations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.ScheduleTrace">
            <summary>
            The program schedule trace.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.OperationScheduler.CompletionSource">
            <summary>
            The scheduler completion source.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.IsRunning">
            <summary>
            Checks if the scheduler is running.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.ScheduledOperation">
            <summary>
            The currently scheduled asynchronous operation.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.ScheduledSteps">
            <summary>
            Number of scheduled steps.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.HasFullyExploredSchedule">
            <summary>
            Checks if the schedule has been fully explored.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.BugFound">
            <summary>
            True if a bug was found.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.OperationScheduler.BugReport">
            <summary>
            Bug report.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.#ctor(PChecker.SystematicTesting.ControlledRuntime,PChecker.SystematicTesting.Strategies.ISchedulingStrategy,PChecker.SystematicTesting.Traces.ScheduleTrace,PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.OperationScheduler"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.ScheduleNextEnabledOperation">
            <summary>
            Schedules the next enabled operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetNextNondeterministicBooleanChoice(System.Int32)">
            <summary>
            Returns the next nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetNextNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Returns the next nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.RegisterOperation(PChecker.SystematicTesting.Operations.AsyncOperation)">
            <summary>
            Registers the specified asynchronous operation.
            </summary>
            <param name="op">The operation to register.</param>
            <returns>True if the operation was successfully registered, else false if it already exists.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.ScheduleOperation(PChecker.SystematicTesting.Operations.AsyncOperation,System.Int32)">
            <summary>
            Schedules the specified asynchronous operation to execute on the task with the given id.
            </summary>
            <param name="op">The operation to schedule.</param>
            <param name="taskId">The id of the task to be used to execute the operation.</param>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.StartOperation(PChecker.SystematicTesting.Operations.AsyncOperation)">
            <summary>
            Starts the execution of the specified asynchronous operation.
            </summary>
            <param name="op">The operation to start executing.</param>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.WaitOperationStart(PChecker.SystematicTesting.Operations.AsyncOperation)">
            <summary>
            Waits for the specified asynchronous operation to start executing.
            </summary>
            <param name="op">The operation to wait.</param>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetOperationWithId``1(System.UInt64)">
            <summary>
            Gets the <see cref="T:PChecker.SystematicTesting.Operations.IAsyncOperation"/> associated with the specified
            unique id, or null if no such operation exists.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetExecutingOperation``1">
            <summary>
            Gets the <see cref="T:PChecker.SystematicTesting.Operations.IAsyncOperation"/> that is executing on the current
            synchronization context, or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetRegisteredOperations">
            <summary>
            Returns all registered operations.
            </summary>
            <remarks>
            This operation is thread safe because the systematic testing
            runtime serializes the execution.
            </remarks>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetEnabledOperationIds">
            <summary>
            Returns the enabled operation ids.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.GetReport">
            <summary>
            Returns a test report with the scheduling statistics.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.CheckNoExternalConcurrencyUsed">
            <summary>
            Checks that no task that is not controlled by the runtime is currently executing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.CheckIfProgramHasDeadlocked(System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.AsyncOperation})">
            <summary>
            Checks for a deadlock. This happens when there are no more enabled operations,
            but there is one or more blocked operations that are waiting to receive an event
            or for a task to complete.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.CheckIfSchedulingStepsBoundIsReached">
            <summary>
            Checks if the scheduling steps bound has been reached. If yes,
            it stops the scheduler and kills all enabled machines.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.NotifyAssertionFailure(System.String,System.Boolean,System.Boolean)">
            <summary>
            Notify that an assertion has failed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.WaitAsync">
            <summary>
            Waits until the scheduler terminates.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.Stop">
            <summary>
            Stops the scheduler.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.OperationScheduler.KillRemainingOperations">
            <summary>
            Kills any remaining operations at the end of the schedule.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Resource">
            <summary>
            Resource that can be used to synchronize asynchronous operations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Resource.Runtime">
            <summary>
            The runtime associated with this resource.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Resource.AwaitingOperations">
            <summary>
            Set of asynchronous operations that are waiting on the resource to be released.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Resource"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Resource.NotifyWait">
            <summary>
            Notifies that the currently executing asynchronous operation is waiting
            for the resource to be released.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Resource.NotifyRelease">
            <summary>
            Notifies all waiting asynchronous operations waiting on this resource,
            that the resource has been released.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy">
            <summary>
            A depth-first search scheduling strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.ScheduleStack">
            <summary>
            Stack of scheduling choices.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.BoolNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.IntNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.SchIndex">
            <summary>
            Current schedule index.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetIndex">
            <summary>
            Current nondeterministic index.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.PrintSchedule">
            <summary>
            Prints the schedule.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.SChoice">
            <summary>
            A scheduling choice. Contains an id and a boolean that is
            true if the choice has been previously explored.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.SChoice.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.SChoice"/> class.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetBooleanChoice">
            <summary>
            A nondeterministic choice. Contains a boolean value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetBooleanChoice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetBooleanChoice"/> class.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetIntegerChoice">
            <summary>
            A nondeterministic choice. Contains an integer value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetIntegerChoice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Exhaustive.DFSStrategy.NondetIntegerChoice"/> class.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.ISchedulingStrategy">
            <summary>
            Interface of an exploration strategy used during controlled testing.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="ops">List of operations that can be scheduled.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
            <returns>True to start the next iteration.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.ISchedulingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy">
            <summary>
            Abstract strategy for detecting liveness property violations. It
            contains a nested <see cref="T:PChecker.SystematicTesting.Strategies.ISchedulingStrategy"/> that is used
            for scheduling decisions.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.CheckerConfiguration">
            <summary>
            The checkerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.SchedulingStrategy">
            <summary>
            Strategy used for scheduling decisions.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.#ctor(PChecker.CheckerConfiguration,System.Collections.Generic.List{PChecker.Specifications.Monitors.Monitor},PChecker.SystematicTesting.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.LivenessCheckingStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy">
            <summary>
            Strategy for detecting liveness property violations using the "temperature"
            method. It contains a nested <see cref="T:PChecker.SystematicTesting.Strategies.ISchedulingStrategy"/> that is used
            for scheduling decisions. Note that liveness property violations are checked
            only if the nested strategy is fair.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy.#ctor(PChecker.CheckerConfiguration,System.Collections.Generic.List{PChecker.Specifications.Monitors.Monitor},PChecker.SystematicTesting.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Liveness.TemperatureCheckingStrategy.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of each monitor, and
            reports an error if one of the liveness monitors has
            passed the temperature threshold.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy">
            <summary>
            A priority-based probabilistic scheduling strategy.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf
            </remarks>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.RandomValueGenerator">
            <summary>
            Random value generator.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.MaxPrioritySwitchPoints">
            <summary>
            Max number of priority switch points.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.ScheduleLength">
            <summary>
            Approximate length of the schedule across all iterations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.PrioritizedOperations">
            <summary>
            List of prioritized operations.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.PriorityChangePoints">
            <summary>
            Set of priority change points.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.#ctor(System.Int32,System.Int32,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetPrioritizedOperation(System.Collections.Generic.List{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation)">
            <summary>
            Returns the prioritized operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.GetHighestPriorityEnabledOperation(System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation})">
            <summary>
            Returns the highest-priority enabled operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.Shuffle(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Shuffles the specified list using the Fisher-Yates algorithm.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.MovePriorityChangePointForward">
            <summary>
            Moves the current priority change point forward. This is a useful
            optimization when a priority change point is assigned in either a
            sequential execution or a nondeterministic choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.PCTStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy">
            <summary>
            A randomized scheduling strategy with increased probability
            to remain in the same scheduling choice.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy.NumberOfCoinFlips">
            <summary>
            Number of coin flips.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy.#ctor(System.Int32,System.Int32,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.ProbabilisticRandomStrategy.ShouldCurrentMachineChange">
            <summary>
            Flip the coin a specified number of times.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy">
            <summary>
            A simple (but effective) randomized scheduling strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.RandomValueGenerator">
            <summary>
            Random value generator.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.#ctor(System.Int32,PChecker.Random.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Probabilistic.RandomStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Special.ComboStrategy">
            <summary>
            This strategy combines two given strategies, using them to schedule
            the prefix and suffix of an execution.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.PrefixStrategy">
            <summary>
            The prefix strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.#ctor(PChecker.SystematicTesting.Strategies.ISchedulingStrategy,PChecker.SystematicTesting.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Special.ComboStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ComboStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy">
            <summary>
            Class representing a replaying scheduling strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy._checkerConfiguration">
            <summary>
            The checkerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.ScheduleTrace">
            <summary>
            The Coyote program schedule trace.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.IsSchedulerFair">
            <summary>
            Is the scheduler that produced the
            schedule trace fair?
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.IsReplaying">
            <summary>
            Is the scheduler replaying the trace?
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.ErrorText">
            <summary>
            Text describing a replay error.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.#ctor(PChecker.CheckerConfiguration,PChecker.SystematicTesting.Traces.ScheduleTrace,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.#ctor(PChecker.CheckerConfiguration,PChecker.SystematicTesting.Traces.ScheduleTrace,System.Boolean,PChecker.SystematicTesting.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.GetNextOperation(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Collections.Generic.IEnumerable{PChecker.SystematicTesting.Operations.IAsyncOperation},PChecker.SystematicTesting.Operations.IAsyncOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.GetNextBooleanChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.GetNextIntegerChoice(PChecker.SystematicTesting.Operations.IAsyncOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.PrepareForNextIteration">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.GetScheduledSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.HasReachedMaxSchedulingSteps">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.IsFair">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.SystematicTesting.Strategies.Special.ReplayStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.SystematicTesting.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TaskController.Runtime">
            <summary>
            The executing runtime.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TaskController.Scheduler">
            <summary>
            The asynchronous operation scheduler.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.#ctor(PChecker.SystematicTesting.ControlledRuntime,PChecker.SystematicTesting.OperationScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TaskController"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleAction(System.Action,System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified action to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleFunction(System.Func{PChecker.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleFunction``1(System.Func{PChecker.Tasks.Task{``0}},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleDelegate``1(System.Delegate,System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified delegate to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleDelay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified delay to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleTaskAwaiterContinuation(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Schedules the specified task awaiter continuation to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ScheduleYieldAwaiterContinuation(System.Action)">
            <summary>
            Schedules the specified yield awaiter continuation to be executed asynchronously.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WhenAllTasksCompleteAsync(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WhenAllTasksCompleteAsync``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WhenAnyTaskCompletesAsync(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WhenAnyTaskCompletesAsync``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WaitAllTasksComplete(PChecker.Tasks.Task[])">
            <summary>
            Waits for all of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WaitAnyTaskCompletes(PChecker.Tasks.Task[])">
            <summary>
            Waits for any of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WaitTaskCompletes(PChecker.Tasks.Task)">
            <summary>
            Waits for the task to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.WaitTaskCompletes``1(PChecker.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete execution and returns the result.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnAsyncTaskMethodBuilderStart(System.Type)">
            <summary>
            Callback invoked when the <see cref="M:PChecker.Tasks.AsyncTaskMethodBuilder.Start``1(``0@)"/> is called.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnAsyncTaskMethodBuilderTask">
            <summary>
            Callback invoked when the <see cref="P:PChecker.Tasks.AsyncTaskMethodBuilder.Task"/> is accessed.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnAsyncTaskMethodBuilderAwaitCompleted(System.Type,System.Type)">
            <summary>
            Callback invoked when the <see cref="M:PChecker.Tasks.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)"/>
            or <see cref="M:PChecker.Tasks.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)"/> is called.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnGetAwaiter">
            <summary>
            Callback invoked when the currently executing task operation gets a controlled awaiter.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnYieldAwaiterGetResult">
            <summary>
            Callback invoked when the <see cref="M:PChecker.Tasks.YieldAwaitable.YieldAwaiter.GetResult"/> is called.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnWaitTask(System.Threading.Tasks.Task)">
            <summary>
            Callback invoked when the executing operation is waiting for the specified task to complete.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.OnWaitTask(System.UInt64,System.Threading.Tasks.Task)">
            <summary>
            Callback invoked when the executing task is waiting for the task with the specified operation id to complete.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.ReportUnhandledExceptionInOperation(PChecker.SystematicTesting.Operations.AsyncOperation,System.Exception)">
            <summary>
            Reports an unhandled exception in the specified asynchronous operation.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TaskController.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, triggers a failure.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestAttribute">
            <summary>
            Attribute for declaring the entry point to
            a Coyote program test.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestInitAttribute">
            <summary>
            Attribute for declaring the initialization
            method to be called before testing starts.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be
            called when all test iterations terminate.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestIterationDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be
            called when each test iteration terminates.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestRuntimeCreateAttribute">
            <summary>
            Attribute for declaring the factory method that creates
            the Coyote testing runtime. This is an advanced feature,
            only to be used for replacing the original Coyote testing
            runtime with an alternative implementation.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestingEngine">
            <summary>
            Testing engine that can run a controlled concurrency test using
            a specified checkerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine._checkerConfiguration">
            <summary>
            CheckerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.TestMethodInfo">
            <summary>
            The method to test.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.PerIterationCallbacks">
            <summary>
            Set of callbacks to invoke at the end
            of each iteration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.Strategy">
            <summary>
            The program exploration strategy.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.RandomValueGenerator">
            <summary>
            Random value generator used by the scheduling strategies.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.ErrorReporter">
            <summary>
            The error reporter.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.Logger">
            <summary>
            The installed logger.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging" >Logging</see> for more information.
            </remarks>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.Profiler">
            <summary>
            The profiler.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.CancellationTokenSource">
            <summary>
            The testing task cancellation token source.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestingEngine.TestReport">
            <summary>
            Data structure containing information
            gathered during testing.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.Graph">
            <summary>
            A graph of the actors, state machines and events of a single test iteration.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.XmlLog">
            <summary>
            Contains a single iteration of XML log output in the case where the IsXmlLogEnabled
            checkerConfiguration is specified.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestingEngine.ReadableTrace">
            <summary>
            The readable trace, if any.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestingEngine.ReproducableTrace">
            <summary>
            The reproducable trace, if any.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestingEngine.IsReplayModeEnabled">
            <summary>
            Checks if the systematic testing engine is running in replay mode.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestingEngine.PrintGuard">
            <summary>
            A guard for printing info.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration)">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Reflection.Assembly)">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Action)">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Action{PChecker.Runtime.ICoyoteRuntime})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Action{PChecker.Actors.IActorRuntime})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Func{PChecker.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Func{PChecker.Runtime.ICoyoteRuntime,PChecker.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Create(PChecker.CheckerConfiguration,System.Func{PChecker.Actors.IActorRuntime,PChecker.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.#ctor(PChecker.CheckerConfiguration,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TestingEngine"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.#ctor(PChecker.CheckerConfiguration,PChecker.SystematicTesting.TestMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TestingEngine"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Run">
            <summary>
            Runs the testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.CreateTestingTask">
            <summary>
            Creates a new testing task.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.RunNextIteration(System.Int32)">
            <summary>
            Runs the next testing iteration.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.Stop">
            <summary>
            Stops the testing engine.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.GetReport">
            <summary>
            Returns a report with the testing results.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.TryEmitTraces(System.String,System.String)">
            <summary>
            Tries to emit the testing traces, if any.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.RegisterPerIterationCallBack(System.Action{System.Int32})">
            <summary>
            Registers a callback to invoke at the end of each iteration. The callback takes as
            a parameter an integer representing the current iteration.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.InitializeCustomLogging(PChecker.SystematicTesting.ControlledRuntime)">
            <summary>
            LogWriters on the given object.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.LoadAssembly(System.String)">
            <summary>
            Loads and returns the specified assembly.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.GatherTestingStatistics(PChecker.SystematicTesting.ControlledRuntime)">
            <summary>
            Gathers the exploration strategy statistics from the specified runtimne.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.ConstructReproducableTrace(PChecker.SystematicTesting.ControlledRuntime)">
            <summary>
            Constructs a reproducable trace.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.GetScheduleForReplay(System.Boolean@)">
            <summary>
            Returns the schedule to replay.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.ShouldPrintIteration(System.Int32)">
            <summary>
            Returns true if the engine should print the current iteration.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestingEngine.SetLogger(System.IO.TextWriter)">
            <summary>
            Installs the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestMethodInfo">
            <summary>
            Maintains information about a method to be tested.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.Assembly">
            <summary>
            The assembly that contains the test method.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.Method">
            <summary>
            The method to be tested.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.Name">
            <summary>
            The name of the test method.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.InitMethod">
            <summary>
            The test initialization method.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.DisposeMethod">
            <summary>
            The test dispose method.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestMethodInfo.IterationDisposeMethod">
            <summary>
            The test dispose method per iteration.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TestMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.#ctor(System.Reflection.Assembly,System.Delegate,System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TestMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.InitializeAllIterations">
            <summary>
            Invokes the user-specified initialization method for all iterations executing this test.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.DisposeCurrentIteration">
            <summary>
            Invokes the user-specified disposal method for the iteration currently executing this test.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.DisposeAllIterations">
            <summary>
            Invokes the user-specified disposal method for all iterations executing this test.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.GetFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the <see cref="T:PChecker.SystematicTesting.TestMethodInfo"/> with the given name in the specified assembly.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.GetTestMethod(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the test method with the specified name. A test method must
            be annotated with the <see cref="T:PChecker.SystematicTesting.TestAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.GetTestSetupMethod(System.Reflection.Assembly,System.Type)">
            <summary>
            Returns the test method with the specified attribute.
            Returns null if no such method is found.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestMethodInfo.FindTestMethodsWithAttribute(System.Type,System.Reflection.BindingFlags,System.Reflection.Assembly)">
            <summary>
            Finds the test methods with the specified attribute in the given assembly.
            Returns an empty list if no such methods are found.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.TestReport">
            <summary>
            Class implementing the Coyote test report.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.CheckerConfiguration">
            <summary>
            CheckerConfiguration of the program-under-test.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.CoverageInfo">
            <summary>
            Information regarding code coverage.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.NumOfExploredFairSchedules">
            <summary>
            Number of explored fair schedules.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.NumOfExploredUnfairSchedules">
            <summary>
            Number of explored unfair schedules.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.NumOfFoundBugs">
            <summary>
            Number of found bugs.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.BugReports">
            <summary>
            Set of unique bug reports.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.MinExploredFairSteps">
            <summary>
            The min explored scheduling steps in average,
            in fair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.MaxExploredFairSteps">
            <summary>
            The max explored scheduling steps in average,
            in fair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.TotalExploredFairSteps">
            <summary>
            The total explored scheduling steps (across
            all testing iterations), in fair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.MaxFairStepsHitInFairTests">
            <summary>
            Number of times the fair max steps bound was hit,
            in fair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.MaxUnfairStepsHitInFairTests">
            <summary>
            Number of times the unfair max steps bound was hit,
            in fair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.MaxUnfairStepsHitInUnfairTests">
            <summary>
            Number of times the unfair max steps bound was hit,
            in unfair tests.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.TestReport.InternalErrors">
            <summary>
            Set of internal errors. If no internal errors
            occurred, then this set is empty.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.TestReport.Lock">
            <summary>
            Lock for the test report.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestReport.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.TestReport"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestReport.Merge(PChecker.SystematicTesting.TestReport)">
            <summary>
            Merges the information from the specified test report.
            </summary>
            <returns>True if merged successfully.</returns>
        </member>
        <member name="M:PChecker.SystematicTesting.TestReport.GetText(PChecker.CheckerConfiguration,System.String)">
            <summary>
            Returns the testing report as a string, given a checkerConfiguration and an optional prefix.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.TestReport.Clone">
            <summary>
            Clones the test report.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Traces.ScheduleStep">
            <summary>
            Class implementing a program schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.Index">
            <summary>
            The unique index of this schedule step.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Traces.ScheduleStep.Type">
            <summary>
            The type of this schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.ScheduledOperationId">
            <summary>
            The id of the scheduled operation. Only relevant if this is
            a regular schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.BooleanChoice">
            <summary>
            The non-deterministic boolean choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.IntegerChoice">
            <summary>
            The non-deterministic integer choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.Previous">
            <summary>
            Previous schedule step.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleStep.Next">
            <summary>
            Next schedule step.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleStep.CreateSchedulingChoice(System.Int32,System.UInt64)">
            <summary>
            Creates a schedule step.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleStep.CreateNondeterministicBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Creates a nondeterministic boolean choice schedule step.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleStep.CreateNondeterministicIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Creates a nondeterministic integer choice schedule step.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleStep.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleStep.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Traces.ScheduleStepType">
            <summary>
            The schedule step type.
            </summary>
        </member>
        <member name="T:PChecker.SystematicTesting.Traces.ScheduleTrace">
            <summary>
            Class implementing a program schedule trace. A trace is a series
            of transitions from some initial state to some end state.
            </summary>
        </member>
        <member name="F:PChecker.SystematicTesting.Traces.ScheduleTrace.Steps">
            <summary>
            The steps of the schedule trace.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Traces.ScheduleTrace.Count">
            <summary>
            The number of steps in the schedule trace.
            </summary>
        </member>
        <member name="P:PChecker.SystematicTesting.Traces.ScheduleTrace.Item(System.Int32)">
            <summary>
            Index for the schedule trace.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Traces.ScheduleTrace"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.SystematicTesting.Traces.ScheduleTrace"/> class.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.AddSchedulingChoice(System.UInt64)">
            <summary>
            Adds a scheduling choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.AddNondeterministicBooleanChoice(System.Boolean)">
            <summary>
            Adds a nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.AddNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Adds a nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.Pop">
            <summary>
            Returns the latest schedule step and removes
            it from the trace.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.Peek">
            <summary>
            Returns the latest schedule step without removing it.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.System#Collections#Generic#IEnumerable{PChecker#SystematicTesting#Traces#ScheduleStep}#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:PChecker.SystematicTesting.Traces.ScheduleTrace.Push(PChecker.SystematicTesting.Traces.ScheduleStep)">
            <summary>
            Pushes a new step to the trace.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.AsyncTaskMethodBuilder">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="P:PChecker.Tasks.AsyncTaskMethodBuilder.Task"/>.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder.IsCompleted">
            <summary>
            True, if completed synchronously and successfully, else false.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder.UseBuilder">
            <summary>
            True, if the builder should be used for setting/getting the result, else false.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.AsyncTaskMethodBuilder.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.#ctor(PChecker.SystematicTesting.TaskController)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.AsyncTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.Create">
            <summary>
            Creates an instance of the <see cref="T:PChecker.Tasks.AsyncTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.SetResult">
            <summary>
            Marks the task as successfully completed.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.AsyncTaskMethodBuilder`1">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="T:PChecker.Tasks.Task`1"/>.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder`1.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder`1.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder`1.Result">
            <summary>
            The result for this builder, if it's completed before any awaits occur.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder`1.IsCompleted">
            <summary>
            True, if completed synchronously and successfully, else false.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.AsyncTaskMethodBuilder`1.UseBuilder">
            <summary>
            True, if the builder should be used for setting/getting the result, else false.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.AsyncTaskMethodBuilder`1.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.#ctor(PChecker.SystematicTesting.TaskController)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.AsyncTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.Create">
            <summary>
            Creates an instance of the <see cref="T:PChecker.Tasks.AsyncTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.ConfiguredTaskAwaitable">
            <summary>
            Provides an awaitable object that is the outcome of invoking <see cref="M:PChecker.Tasks.Task.ConfigureAwait(System.Boolean)"/>.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.ConfiguredTaskAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends the await on the completed task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:PChecker.Tasks.ConfiguredTaskAwaitable`1">
            <summary>
            Provides an awaitable object that enables configured awaits on a <see cref="T:PChecker.Tasks.Task`1"/>.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable`1.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.ConfiguredTaskAwaitable`1"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends the await on the completed task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:PChecker.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:PChecker.Tasks.Locks.AsyncLock">
            <summary>
            A non-reentrant mutual exclusion lock that can be acquired asynchronously
            in a first-in first-out order. During testing, the lock is automatically
            replaced with a controlled mocked version.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.AsyncLock.Awaiters">
            <summary>
            Queue of tasks awaiting to acquire the lock.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Locks.AsyncLock.IsAcquired">
            <summary>
            True if the lock has been acquired, else false.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Locks.AsyncLock"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Create">
            <summary>
            Creates a new mutual exclusion lock.
            </summary>
            <returns>The asynchronous mutual exclusion lock.</returns>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.AcquireAsync">
            <summary>
            Tries to acquire the lock asynchronously, and returns a task that completes
            when the lock has been acquired. The returned task contains a releaser that
            releases the lock when disposed. This is not a reentrant operation.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Release">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.Locks.AsyncLock.Releaser">
            <summary>
            Releases the acquired <see cref="F:PChecker.Tasks.Locks.AsyncLock.Releaser.AsyncLock"/> when disposed.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.AsyncLock.Releaser.AsyncLock">
            <summary>
            The acquired lock.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Releaser.#ctor(PChecker.Tasks.Locks.AsyncLock)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Locks.AsyncLock.Releaser"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Releaser.Dispose">
            <summary>
            Releases the acquired lock.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.Locks.AsyncLock.Mock">
            <summary>
            Mock implementation of <see cref="T:PChecker.Tasks.Locks.AsyncLock"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.AsyncLock.Mock.Resource">
            <summary>
            The resource associated with this lock.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Mock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Locks.AsyncLock.Mock"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Mock.AcquireAsync">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.Locks.AsyncLock.Mock.Release">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Tasks.Locks.Semaphore">
            <summary>
            A semaphore that limits the number of tasks that can access a resource. During testing,
            the semaphore is automatically replaced with a controlled mocked version.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.Semaphore.Instance">
            <summary>
            Limits the number of tasks that can access a resource.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Locks.Semaphore.CurrentCount">
            <summary>
            Number of remaining tasks that can enter the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Locks.Semaphore"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new semaphore.
            </summary>
            <returns>The semaphore.</returns>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Wait">
            <summary>
            Blocks the current task until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.WaitAsync">
            <summary>
            Asynchronously waits to enter the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Release">
            <summary>
            Releases the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Dispose">
            <summary>
            Releases resources used by the semaphore.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.Locks.Semaphore.Mock">
            <summary>
            Mock implementation of <see cref="T:PChecker.Tasks.Locks.Semaphore"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.Semaphore.Mock.Resource">
            <summary>
            The resource associated with this semaphore.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.Semaphore.Mock.MaxCount">
            <summary>
            The maximum number of requests that can be granted concurrently.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Locks.Semaphore.Mock.NumAcquired">
            <summary>
            The number of requests that have been granted concurrently.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Locks.Semaphore.Mock.CurrentCount">
            <summary>
            Number of remaining tasks that can enter the semaphore.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Mock.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Locks.Semaphore.Mock"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Mock.Wait">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Mock.WaitAsync">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.Locks.Semaphore.Mock.Release">
            <inheritdoc/>
        </member>
        <member name="T:PChecker.Tasks.Task">
            <summary>
            Represents an asynchronous operation. Each <see cref="T:PChecker.Tasks.Task"/> is a thin wrapper over
            <see cref="T:System.Threading.Tasks.Task"/> and each call simply invokes the wrapped task. During
            testing, a <see cref="T:PChecker.Tasks.Task"/> is controlled by the runtime and systematically interleaved
            with other asynchronous operations to find bugs.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/async/overview">Programming model: asynchronous tasks</see> for more information.
            </remarks>
        </member>
        <member name="P:PChecker.Tasks.Task.CompletedTask">
            <summary>
            A <see cref="T:PChecker.Tasks.Task"/> that has completed successfully.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.CurrentId">
            <summary>
            Returns the id of the currently executing <see cref="T:PChecker.Tasks.Task"/>.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Task.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.Task.InternalTask">
            <summary>
            Internal task used to execute the work.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.Id">
            <summary>
            The id of this task.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.UncontrolledTask">
            <summary>
            The uncontrolled <see cref="T:System.Threading.Tasks.Task"/> that is wrapped inside this
            controlled <see cref="T:PChecker.Tasks.Task"/>.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.IsCompleted">
            <summary>
            Value that indicates whether the task has completed.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.IsCanceled">
            <summary>
            Value that indicates whether the task completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.IsFaulted">
            <summary>
            Value that indicates whether the task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.Exception">
            <summary>
            Gets the <see cref="T:System.AggregateException"/> that caused the task
            to end prematurely. If the task completed successfully or has not yet
            thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task.Status">
            <summary>
            The status of this task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Task"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task`1"/> that is completed successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that is completed due to
            cancellation with a specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task`1"/> that is completed due to
            cancellation with a specified cancellation token.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.FromException(System.Exception)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that is completed with a specified exception.
            </summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.FromException``1(System.Exception)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task`1"/> that is completed with a specified exception.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:PChecker.Tasks.Task"/>
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:PChecker.Tasks.Task"/>
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run(System.Func{PChecker.Tasks.Task})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:PChecker.Tasks.Task"/> returned by the function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run(System.Func{PChecker.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:PChecker.Tasks.Task"/> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run``1(System.Func{PChecker.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:PChecker.Tasks.Task`1"/> returned by the function.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run``1(System.Func{PChecker.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:PChecker.Tasks.Task`1"/> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:PChecker.Tasks.Task"/>
            object that represents that work.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:PChecker.Tasks.Task"/>
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Delay(System.Int32)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">
            The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
            </param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">
            The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
            </param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the delay.</param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Delay(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that completes after a specified time interval.
            </summary>
            <param name="delay">
            The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1)
            to wait indefinitely.
            </param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that completes after a specified time interval.
            </summary>
            <param name="delay">
            The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1)
            to wait indefinitely.
            </param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the delay.</param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAll(PChecker.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAllTasksCompleteAsync(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAll``1(PChecker.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified array have completed.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAllTasksCompleteAsync``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAny(PChecker.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAnyTaskCompletesAsync(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAnyTaskCompletesInProductionAsync(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAny``1(PChecker.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAnyTaskCompletesAsync``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WhenAnyTaskCompletesInProductionAsync``1(System.Collections.Generic.IEnumerable{PChecker.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:PChecker.Tasks.Task"/> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAll(PChecker.Tasks.Task[])">
            <summary>
            Waits for all of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAll(PChecker.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified time interval.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAll(PChecker.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified number of milliseconds.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAll(PChecker.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for all of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution unless the wait is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAll(PChecker.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAny(PChecker.Tasks.Task[])">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>The index of the completed task in the tasks array.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAny(PChecker.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified time interval.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAny(PChecker.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified number of milliseconds.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAny(PChecker.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution unless the wait is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>The index of the completed task in the tasks array.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.WaitAny(PChecker.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:PChecker.Tasks.Task"/> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.Wait">
            <summary>
            Waits for the task to complete execution.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.Wait(System.TimeSpan)">
            <summary>
            Waits for the task to complete execution within a specified time interval.
            </summary>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Wait(System.Int32)">
            <summary>
            Waits for the task to complete execution within a specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete execution. The wait terminates if
            a cancellation token is canceled before the task completes.
            </summary>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:PChecker.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.Task.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
            <param name="continueOnCapturedContext">
            True to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="M:PChecker.Tasks.Task.ExploreContextSwitch">
            <summary>
            Injects a context switch point that can be systematically explored during testing.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:PChecker.Tasks.Task"/>, releasing all of its unmanaged resources.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task.Dispose">
            <summary>
            Disposes the <see cref="T:PChecker.Tasks.Task"/>, releasing all of its unmanaged resources.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:PChecker.Tasks.Task"/>, this method is not thread-safe.
            </remarks>
        </member>
        <member name="T:PChecker.Tasks.Task`1">
            <summary>
            Represents an asynchronous operation that can return a value. Each <see cref="T:PChecker.Tasks.Task`1"/> is a thin
            wrapper over <see cref="T:System.Threading.Tasks.Task`1"/> and each call simply invokes the wrapped task. During
            testing, a <see cref="T:PChecker.Tasks.Task"/> is controlled by the runtime and systematically interleaved with other
            asynchronous operations to find bugs.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
        </member>
        <member name="P:PChecker.Tasks.Task`1.UncontrolledTask">
            <summary>
            The uncontrolled <see cref="T:System.Threading.Tasks.Task`1"/> that is wrapped inside this
            controlled <see cref="T:PChecker.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.Task`1.Result">
            <summary>
            Gets the result value of this task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task`1.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.Task`1"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task`1.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.Task`1.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
            <param name="continueOnCapturedContext">
            True to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="T:PChecker.Tasks.TaskAwaiter">
            <summary>
            Implements a <see cref="T:PChecker.Tasks.Task"/> awaiter. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.TaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.TaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter.GetResult">
            <summary>
            Ends the wait for the completion of the controlled task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.TaskAwaiter`1">
            <summary>
            Implements a <see cref="T:PChecker.Tasks.Task"/> awaiter. This type is intended for compiler use only.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter`1.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter`1.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskAwaiter`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.TaskAwaiter`1.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter`1.#ctor(PChecker.SystematicTesting.TaskController,System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.TaskAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter`1.GetResult">
            <summary>
            Ends the wait for the completion of the controlled task.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.TaskCompletionSource">
            <summary>
            Represents the producer side of a task unbound to a delegate, providing access to the consumer
            side through the <see cref="P:PChecker.Tasks.TaskCompletionSource`1.Task"/> property.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Create``1">
            <summary>
            Creates a new <see cref="T:PChecker.Tasks.TaskCompletionSource`1"/> instance.
            </summary>
            <typeparam name="TResult">The type of the result value assocatied with this task completion source.</typeparam>
            <returns>The task completion source.</returns>
        </member>
        <member name="T:PChecker.Tasks.TaskCompletionSource.Mock`1">
            <summary>
            Mock implementation of <see cref="T:PChecker.Tasks.TaskCompletionSource`1"/> that
            can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.Resource">
            <summary>
            The resource associated with this task completion source.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.Status">
            <summary>
            True if the task completion source is completed, else false.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.ResultTask">
            <summary>
            The task that provides access to the result.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.Result">
            <summary>
            The result value.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.Exception">
            <summary>
            The bound exception, if any.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource.Mock`1.CancellationTokenSource">
            <summary>
            The cancellation token source.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.TaskCompletionSource.Mock`1.Task">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.TaskCompletionSource.Mock`1"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.SetResult(`0)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.TrySetResult(`0)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.SetCanceled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.TrySetCanceled">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.SetException(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.TrySetException(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.CompleteWithStatus(System.Threading.Tasks.TaskStatus,`0,System.Exception)">
            <summary>
            Completes the task completion source with the specified status.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource.Mock`1.TryCompleteWithStatus(System.Threading.Tasks.TaskStatus,`0,System.Exception)">
            <summary>
            Tries to complete the task completion source with the specified status.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.TaskCompletionSource`1">
            <summary>
            Represents the producer side of a task unbound to a delegate, providing access to the consumer
            side through the <see cref="P:PChecker.Tasks.TaskCompletionSource`1.Task"/> property.
            </summary>
            <typeparam name="TResult">The type of the result value assocatied with this task completion source.</typeparam>
        </member>
        <member name="F:PChecker.Tasks.TaskCompletionSource`1.Instance">
            <summary>
            The internal task completion source.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.TaskCompletionSource`1.Task">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.TaskCompletionSource`1"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.SetResult(`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The result value to bind to this task.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:PChecker.Tasks.Task`1"/>
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.</exception>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The result value to bind to this task.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.SetCanceled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:PChecker.Tasks.Task`1"/>
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.</exception>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:PChecker.Tasks.Task`1"/>
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.</exception>
        </member>
        <member name="M:PChecker.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="T:PChecker.Tasks.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/> objects.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.TaskExtensions.WrapInControlledTask(System.Threading.Tasks.Task)">
            <summary>
            Returns a dummy controlled <see cref="T:PChecker.Tasks.Task"/> that wraps this uncontrolled <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <remarks>
            The returned dummy controlled <see cref="T:PChecker.Tasks.Task"/> does not actually take control of the uncontrolled
            <see cref="T:System.Threading.Tasks.Task"/> during systematic testing, so this method should only be used to cross
            an interface boundary where a controlled <see cref="T:PChecker.Tasks.Task"/> must be temporarily converted into an
            uncontrolled <see cref="T:System.Threading.Tasks.Task"/> and then coverted back to a controlled <see cref="T:PChecker.Tasks.Task"/>.
            </remarks>
        </member>
        <member name="M:PChecker.Tasks.TaskExtensions.WrapInControlledTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a dummy controlled <see cref="T:PChecker.Tasks.Task`1"/> that wraps this uncontrolled
            <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>
            The returned dummy controlled <see cref="T:PChecker.Tasks.Task`1"/> does not actually take control of the
            uncontrolled <see cref="T:System.Threading.Tasks.Task`1"/> during systematic testing, so this method
            should only be used to cross an interface boundary where a controlled <see cref="T:PChecker.Tasks.Task`1"/>
            must be temporarily converted into an uncontrolled <see cref="T:System.Threading.Tasks.Task`1"/> and
            then coverted back to a controlled <see cref="T:PChecker.Tasks.Task`1"/>.
            </remarks>
        </member>
        <member name="T:PChecker.Tasks.YieldAwaitable">
            <summary>
            Implements an awaitable that asynchronously yields back to the current context when awaited.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.YieldAwaitable.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.#ctor(PChecker.SystematicTesting.TaskController)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.YieldAwaitable"/> struct.
            </summary>
        </member>
        <member name="T:PChecker.Tasks.YieldAwaitable.YieldAwaiter">
            <summary>
            Provides an awaiter that switches into a target environment.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:PChecker.Tasks.YieldAwaitable.YieldAwaiter.TaskController">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:PChecker.Tasks.YieldAwaitable.YieldAwaiter.Awaiter">
            <summary>
            The internal yield awaiter.
            </summary>
        </member>
        <member name="P:PChecker.Tasks.YieldAwaitable.YieldAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether a yield is not required.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.YieldAwaiter.#ctor(PChecker.SystematicTesting.TaskController,System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Tasks.YieldAwaitable.YieldAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.YieldAwaiter.GetResult">
            <summary>
            Ends the await operation.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
            <summary>
            Posts the continuation action back to the current context.
            </summary>
        </member>
        <member name="M:PChecker.Tasks.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Posts the continuation action back to the current context.
            </summary>
        </member>
        <member name="T:PChecker.Testing.TestingPortfolio">
            <summary>
            A portfolio of systematic testing strategies.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingPortfolio.ConfigureStrategyForCurrentProcess(PChecker.CheckerConfiguration)">
            <summary>
            Configures the systematic testing strategy for the current testing process.
            </summary>
        </member>
        <member name="T:PChecker.Testing.TestingProcess">
            <summary>
            A testing process, this can also be the client side of a multi-process test
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess.Terminating">
            <summary>
            Whether this process is terminating.
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess.Name">
            <summary>
            A name for the test client
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess._checkerConfiguration">
            <summary>
            CheckerConfiguration.
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess.TestingEngine">
            <summary>
            The testing engine associated with
            this testing process.
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess.Server">
            <summary>
            The channel to the TestProcessScheduler.
            </summary>
        </member>
        <member name="F:PChecker.Testing.TestingProcess.ProgressTask">
            <summary>
            A way to synchronouse background progress task with the main thread.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.Create(PChecker.CheckerConfiguration)">
            <summary>
            Creates a Coyote testing process.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.GetTestReport">
            <summary>
            Get the current test report.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.Run">
            <summary>
            Runs the Coyote testing process.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.#ctor(PChecker.CheckerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:PChecker.Testing.TestingProcess"/> class.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.Finalize">
            <inheritdoc />
        </member>
        <member name="M:PChecker.Testing.TestingProcess.ConnectToServer">
            <summary>
            Opens the remote notification listener. If this is
            not a parallel testing process, then this operation
            does nothing.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.Disconnect">
            <summary>
            Closes the remote notification listener. If this is
            not a parallel testing process, then this operation
            does nothing.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.NotifyBugFound">
            <summary>
            Notifies the remote testing scheduler
            about a discovered bug.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.SendTestReport">
            <summary>
            Sends the test report associated with this testing process.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.EmitTraces">
            <summary>
            Emits the testing traces.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.StartProgressMonitorTask">
            <summary>
            Creates a task that pings the server with a heartbeat telling the server our current progress..
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcess.SendProgressMessage">
            <summary>
            Sends the TestProgressMessage and if server cannot be reached, stop the testing.
            </summary>
        </member>
        <member name="T:PChecker.Testing.TestingProcessFactory">
            <summary>
            The Coyote testing process factory.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcessFactory.Create(System.UInt32,PChecker.CheckerConfiguration)">
            <summary>
            Creates a new testing process.
            </summary>
        </member>
        <member name="M:PChecker.Testing.TestingProcessFactory.CreateArgumentsFromConfiguration(System.UInt32,PChecker.CheckerConfiguration)">
            <summary>
            Creates arguments from the specified checkerConfiguration.
            </summary>
        </member>
        <member name="T:PChecker.Utilities.ExitCode">
            <summary>
            The exit code returned by the tester.
            </summary>
        </member>
        <member name="F:PChecker.Utilities.ExitCode.Success">
            <summary>
            Indicates that no bugs were found.
            </summary>
        </member>
        <member name="F:PChecker.Utilities.ExitCode.BugFound">
            <summary>
            Indicates that a bug was found.
            </summary>
        </member>
        <member name="F:PChecker.Utilities.ExitCode.InternalError">
            <summary>
            Indicates that an internal exception was thrown.
            </summary>
        </member>
        <member name="T:PChecker.Utilities.Profiler">
            <summary>
            The Coyote profiler.
            </summary>
        </member>
        <member name="M:PChecker.Utilities.Profiler.StartMeasuringExecutionTime">
            <summary>
            Starts measuring execution time.
            </summary>
        </member>
        <member name="M:PChecker.Utilities.Profiler.StopMeasuringExecutionTime">
            <summary>
            Stops measuring execution time.
            </summary>
        </member>
        <member name="M:PChecker.Utilities.Profiler.Results">
            <summary>
            Returns profilling results.
            </summary>
        </member>
        <member name="T:PChecker.Utilities.Reporter">
            <summary>
            The Coyote testing reporter.
            </summary>
        </member>
        <member name="M:PChecker.Utilities.Reporter.EmitTestingCoverageReport(PChecker.SystematicTesting.TestReport,System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Emits the testing coverage report.
            </summary>
            <param name="report">TestReport</param>
            <param name="processId">Optional process id that produced the report</param>
            <param name="isDebug">Is a debug report</param>
        </member>
        <member name="M:PChecker.Utilities.Reporter.GetOutputDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns (and creates if it does not exist) the output directory with an optional suffix.
            </summary>
        </member>
        <member name="M:PChecker.Utilities.Reporter.EmitTestingCoverageOutputFiles(PChecker.SystematicTesting.TestReport,System.String,System.String)">
            <summary>
            Emits all the testing coverage related output files.
            </summary>
            <param name="report">TestReport containing CoverageInfo</param>
            <param name="directory">Output directory name, unique for this run</param>
            <param name="file">Output file name</param>
        </member>
    </members>
</doc>
