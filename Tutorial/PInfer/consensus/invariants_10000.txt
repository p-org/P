∀e0: eRequest :: ∃e1: eStart :: (e0.payload.candidate == e1.payload.requestVoteFrom) ∧ (_num_e_exists_ >= quorum)
∀e0: eRequest :: ∃e1: eStart :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.candidate == e1.payload.requestVoteFrom)
∀e0: eStateVoted :: ∃e1: eRequest :: (_num_e_exists_ >= quorum) ∧ (e0.payload.votedFor == e1.payload.candidate) ∧ (e0.payload.voter == e1.payload.candidate)
∀e0: eStateVoted :: ∃e1: eRequest :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.votedFor == e1.payload.candidate)
∀e0: eStateVoted ∀e1: eStateVoted :: (e0.payload.voter == e1.payload.voter) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.votedFor == e1.payload.votedFor)
∀e0: eStateVoted ∀e1: eStateVoted :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.voter == e1.payload.votedFor) -> (e0.payload.votedFor == e1.payload.voter)
∀e0: eStateVoted ∀e1: eStateVoted :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.votedFor == e1.payload.voter) -> (e0.payload.voter == e1.payload.votedFor)
∀e0: eVote :: ∃e1: eRequest :: (_num_e_exists_ >= quorum) ∧ (e0.payload.votedFor == e1.payload.candidate) ∧ (e0.payload.voter == e1.payload.candidate)
∀e0: eVote :: ∃e1: eRequest :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.votedFor == e1.payload.candidate)
∀e0: eVote ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.votedFor == e1.payload.votedFor)
∀e0: eVote ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.voter == e1.payload.votedFor) -> (e0.payload.votedFor == e1.payload.voter)
∀e0: eVote ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.votedFor == e1.payload.voter) -> (e0.payload.voter == e1.payload.votedFor)
∀e0: eStateVoted ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) -> (e0.payload.votedFor == e1.payload.votedFor) ∧ (indexof(e0) < indexof(e1))
∀e0: eStateVoted ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.votedFor == e1.payload.voter) -> (e0.payload.voter == e1.payload.votedFor)
∀e0: eStateVoted ∀e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (e0.payload.voter == e1.payload.votedFor) -> (e0.payload.votedFor == e1.payload.voter)
∀e0: eStateVoted :: ∃e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (_num_e_exists_ >= quorum) ∧ (e0.payload.votedFor == e1.payload.voter) ∧ (e0.payload.votedFor == e1.payload.votedFor)
∀e0: eStateVoted :: ∃e1: eVote :: (e0.payload.votedFor == e1.payload.voter) ∧ (_num_e_exists_ <= quorum)
∀e0: eStateVoted :: ∃e1: eVote :: (e0.payload.voter == e1.payload.voter) ∧ (_num_e_exists_ <= quorum) ∧ (indexof(e0) < indexof(e1)) ∧ (e0.payload.votedFor == e1.payload.votedFor)
∀e0: eDecide ∀e1: eVote :: (e0.payload.node == e1.payload.voter) -> (indexof(e0) > indexof(e1))
∀e0: eDecide :: ∃e1: eVote :: (e0.payload.node == e1.payload.voter) ∧ (_num_e_exists_ <= quorum) ∧ (indexof(e0) > indexof(e1))
∀e0: eDecide :: ∃e1: eVote :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.node == e1.payload.voter) ∧ (e0.payload.node == e1.payload.votedFor) ∧ (_num_e_exists_ >= quorum)
∀e0: eDecide ∀e1: eDecide :: (indexof(e0) == indexof(e1)) ∧ (e0.payload.value == e1.payload.value) ∧ (e0.payload.node == e1.payload.node)
∀e0: eWon ∀e1: eVote :: (e0.payload.node == e1.payload.voter) -> (indexof(e0) > indexof(e1))
∀e0: eWon :: ∃e1: eVote :: (e0.payload.node == e1.payload.voter) ∧ (_num_e_exists_ <= quorum) ∧ (indexof(e0) > indexof(e1))
∀e0: eWon :: ∃e1: eVote :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.node == e1.payload.voter) ∧ (e0.payload.node == e1.payload.votedFor) ∧ (_num_e_exists_ >= quorum)
∀e0: eWon ∀e1: eWon :: (indexof(e0) == indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eDecide ∀e1: eWon :: (e0.payload.node == e1.payload.node)
∀e0: eDecide :: ∃e1: eWon :: (_num_e_exists_ <= quorum) ∧ (e0.payload.node == e1.payload.node) ∧ (indexof(e0) > indexof(e1))
