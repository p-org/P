∀e0: eServerState ∀e1: eHoldsLock :: (e0.payload.epoch == e1.payload.epoch) ∧ e0.payload.holdsLock -> (indexof(e0) < indexof(e1))
∀e0: eServerState :: ∃e1: eHoldsLock :: (e0.payload.epoch == e1.payload.epoch)
∀e0: eServerState :: e0.payload.holdsLock -> ∃e1: eHoldsLock :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch)
∀e0: eHoldsLock ∀e1: eUnlock :: (e0.payload.node == e1.payload.node) -> (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) < indexof(e1))
∀e0: eHoldsLock ∀e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) < indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eHoldsLock :: ∃e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) < indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eGrant ∀e1: eUnlock :: (e0.payload.node == e1.payload.node) -> (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) < indexof(e1))
∀e0: eGrant ∀e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) < indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eGrant :: ∃e1: eUnlock :: (e0.payload.node == e1.payload.node) ∧ (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) < indexof(e1))
∀e0: eServerState :: ∃e1: eLock :: (indexof(e0) > indexof(e1))
∀e0: eGrant ∀e1: eLock :: (e0.payload.node == e1.payload.node) -> (indexof(e0) > indexof(e1))
∀e0: eGrant :: ∃e1: eLock :: (e0.payload.node == e1.payload.node) ∧ (indexof(e0) > indexof(e1))
∀e0: eGrant ∀e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eGrant ∀e1: eGrant :: (e0.payload.node == e1.payload.node) -> (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) == indexof(e1))
∀e0: eServerState ∀e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) ∧ e0.payload.holdsLock -> (indexof(e0) < indexof(e1))
∀e0: eServerState ∀e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) ∧ !(e0.payload.holdsLock) -> (indexof(e0) > indexof(e1))
∀e0: eServerState :: ∃e1: eGrant :: (e0.payload.epoch == e1.payload.epoch)
∀e0: eServerState :: e0.payload.holdsLock -> ∃e1: eGrant :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch)
∀e0: eServerState :: !(e0.payload.holdsLock) -> ∃e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) > indexof(e1))
∀e0: eServerState ∀e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) ∧ e0.payload.holdsLock -> (indexof(e0) < indexof(e1))
∀e0: eServerState :: ∃e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch)
∀e0: eServerState :: e0.payload.holdsLock -> ∃e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) < indexof(e1))
∀e0: eLock ∀e1: eLock :: (e0.payload.node == e1.payload.node) -> (indexof(e0) == indexof(e1))
∀e0: eHoldsLock ∀e1: eGrant :: (e0.payload.node == e1.payload.node) -> (indexof(e0) > indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch)
∀e0: eHoldsLock ∀e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) > indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eHoldsLock :: ∃e1: eGrant :: (e0.payload.epoch == e1.payload.epoch) ∧ (e0.payload.node == e1.payload.node) ∧ (indexof(e0) > indexof(e1))
∀e0: eHoldsLock ∀e1: eHoldsLock :: (e0.payload.node == e1.payload.node) -> (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) == indexof(e1))
∀e0: eHoldsLock ∀e1: eHoldsLock :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eUnlock ∀e1: eUnlock :: (e0.payload.node == e1.payload.node) -> (e0.payload.epoch == e1.payload.epoch) ∧ (indexof(e0) == indexof(e1))
∀e0: eUnlock ∀e1: eUnlock :: (e0.payload.epoch == e1.payload.epoch) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.node == e1.payload.node)
∀e0: eServerState ∀e1: eHoldsLock :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch) -> (e0.payload.holdsLock == False)
∀e0: eServerState ∀e1: eServerState :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch) -> (e1.payload.holdsLock == False)
∀e0: eServerState ∀e1: eGrant :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch) -> (e0.payload.holdsLock == True)
∀e0: eServerState ∀e1: eGrant :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch) -> (e0.payload.holdsLock == False)
∀e0: eServerState ∀e1: eUnlock :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.epoch == e1.payload.epoch) -> (e0.payload.holdsLock == False)
