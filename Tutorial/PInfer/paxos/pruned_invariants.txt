∀e0: eLearn ∀e1: eAcceptReq :: (indexof(e0) < indexof(e1)) -> (e0.payload.ballot != e1.payload.ballot_n)
∀e0: eLearn ∀e1: eAcceptReq :: (e0.payload.ballot < e1.payload.ballot_n) -> (e0.payload.v == e1.payload.v)
∀e0: eLearn ∀e1: eAcceptReq :: (e0.payload.ballot == e1.payload.ballot_n) -> (indexof(e0) > indexof(e1)) ∧ (e0.payload.v == e1.payload.v)
∀e0: eLearn :: ∃e1: eAcceptReq :: (e0.payload.ballot == e1.payload.ballot_n) ∧ (e0.payload.v == e1.payload.v) ∧ (_num_e_exists_ >= quorum) ∧ (indexof(e0) > indexof(e1))
∀e0: ePrepareReq ∀e1: ePrepareReq :: (e0.payload.proposer == e1.payload.proposer) -> (e0.payload.ballot_n == e1.payload.ballot_n) ∧ (e0.payload.v == e1.payload.v)
∀e0: ePrepareReq ∀e1: ePrepareReq :: (e0.payload.ballot_n == e1.payload.ballot_n) -> (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.v == e1.payload.v)
∀e0: eAcceptReq ∀e1: ePrepareRsp :: (e0.payload.ballot_n == e1.payload.n_accepted) -> (e0.payload.v == e1.payload.v_accepted) ∧ (e0.payload.ballot_n < e1.payload.promised)
∀e0: eAcceptReq ∀e1: ePrepareRsp :: (e0.payload.ballot_n > e1.payload.promised) -> (e0.payload.ballot_n > e1.payload.n_accepted)
∀e0: eAcceptReq ∀e1: ePrepareRsp :: (e0.payload.ballot_n == e1.payload.promised) -> (e0.payload.ballot_n > e1.payload.n_accepted)
∀e0: eAcceptReq ∀e1: eAcceptReq :: (e0.payload.proposer == e1.payload.proposer) -> (e0.payload.ballot_n == e1.payload.ballot_n) ∧ (e0.payload.v == e1.payload.v)
∀e0: eAcceptReq ∀e1: eAcceptReq :: (e0.payload.ballot_n == e1.payload.ballot_n) -> (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.v == e1.payload.v)
∀e0: eLearn :: ∃e1: eAcceptRsp :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.ballot == e1.payload.accepted) ∧ (_num_e_exists_ >= quorum)
∀e0: eLearn ∀e1: eLearn :: (e0.payload.v == e1.payload.v)
∀e0: eLearn ∀e1: eLearn :: (indexof(e0) > indexof(e1)) -> (e0.payload.ballot != e1.payload.ballot)
∀e0: eLearn ∀e1: eLearn :: (e0.payload.ballot == e1.payload.ballot) -> (indexof(e0) == indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareReq :: (e0.payload.n_accepted == e1.payload.ballot_n) -> (indexof(e0) > indexof(e1)) ∧ (e0.payload.promised > e1.payload.ballot_n)
∀e0: ePrepareRsp ∀e1: ePrepareReq :: (indexof(e0) < indexof(e1)) -> (e0.payload.n_accepted != e1.payload.ballot_n)
∀e0: ePrepareRsp ∀e1: ePrepareReq :: (e0.payload.promised < e1.payload.ballot_n) -> (e0.payload.n_accepted < e1.payload.ballot_n)
∀e0: ePrepareRsp ∀e1: ePrepareReq :: (e0.payload.promised == e1.payload.ballot_n) -> (e0.payload.n_accepted < e1.payload.ballot_n)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted == e1.payload.promised) -> (e0.payload.promised > e1.payload.n_accepted) ∧ (e0.payload.promised > e1.payload.promised) ∧ (e0.payload.n_accepted > e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised == e1.payload.n_accepted) -> (e0.payload.promised < e1.payload.promised) ∧ (e0.payload.n_accepted < e1.payload.promised) ∧ (e0.payload.n_accepted < e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised == e1.payload.promised) -> (e0.payload.promised > e1.payload.n_accepted) ∧ (e0.payload.n_accepted < e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised < e1.payload.promised) -> (e0.payload.n_accepted < e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) > indexof(e1)) -> (e0.payload.promised >= e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted < e1.payload.n_accepted) -> (e0.payload.n_accepted < e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted == e1.payload.n_accepted) -> (e0.payload.promised > e1.payload.n_accepted) ∧ (e0.payload.n_accepted < e1.payload.promised) ∧ (e0.payload.v_accepted == e1.payload.v_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.v_accepted == e1.payload.v_accepted) -> (e0.payload.promised >= e1.payload.n_accepted) ∧ (e0.payload.n_accepted <= e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.acceptor == e1.payload.acceptor) -> (e0.payload.n_accepted <= e1.payload.n_accepted) ∧ (e0.payload.n_accepted < e1.payload.promised) ∧ (e0.payload.promised < e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) -> (e0.payload.n_accepted <= e1.payload.n_accepted) ∧ (e0.payload.n_accepted < e1.payload.promised)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.promised == e1.payload.n_accepted) -> (indexof(e0) < indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.n_accepted == e1.payload.promised) -> (indexof(e0) > indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.promised == e1.payload.promised) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) ∧ (e0.payload.n_accepted == e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.promised < e1.payload.promised) -> (e0.payload.n_accepted <= e1.payload.n_accepted) ∧ (indexof(e0) < indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.n_accepted < e1.payload.n_accepted) -> (e0.payload.promised <= e1.payload.n_accepted) ∧ (e0.payload.promised < e1.payload.promised) ∧ (indexof(e0) < indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.n_accepted < e1.payload.promised) -> (e0.payload.n_accepted <= e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.promised > e1.payload.n_accepted) -> (e0.payload.n_accepted >= e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised == e1.payload.n_accepted) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) -> (indexof(e0) < indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted == e1.payload.promised) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) -> (indexof(e0) > indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised < e1.payload.promised) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) -> (e0.payload.n_accepted <= e1.payload.n_accepted)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted < e1.payload.n_accepted) ∧ (e0.payload.v_accepted == e1.payload.v_accepted) -> (e0.payload.promised <= e1.payload.promised) ∧ (indexof(e0) < indexof(e1))
∀e0: eAcceptRsp :: ∃e1: eAcceptReq :: (e0.payload.accepted == e1.payload.ballot_n) ∧ (_num_e_exists_ >= quorum)
∀e0: eAcceptRsp :: ∃e1: eAcceptReq :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.accepted == e1.payload.ballot_n)
∀e0: eAcceptRsp ∀e1: eAcceptRsp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.acceptor == e1.payload.acceptor) -> (e0.payload.accepted < e1.payload.accepted)
∀e0: eAcceptRsp ∀e1: eAcceptRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.accepted > e1.payload.accepted) -> (indexof(e0) > indexof(e1))
∀e0: eAcceptRsp ∀e1: eAcceptRsp :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.accepted == e1.payload.accepted) -> (indexof(e0) == indexof(e1))
∀e0: eAcceptReq :: ∃e1: ePrepareRsp :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.ballot_n > e1.payload.n_accepted) ∧ (_num_e_exists_ >= quorum) ∧ (e0.payload.ballot_n == e1.payload.promised) ∧ (e1.payload.v_accepted != 0)
∀e0: ePrepareRsp :: ∃e1: ePrepareReq :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.n_accepted < e1.payload.ballot_n) ∧ (e0.payload.promised == e1.payload.ballot_n) ∧ (e0.payload.v_accepted != 0)
∀e0: ePrepareRsp :: ∃e1: ePrepareReq :: (e0.payload.promised == e1.payload.ballot_n) ∧ (e0.payload.n_accepted < e1.payload.ballot_n) ∧ (_num_e_exists_ >= quorum) ∧ (e0.payload.v_accepted != 0)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised < e1.payload.n_accepted) -> (e0.payload.v_accepted == (-(1))) ∧ (indexof(e0) < indexof(e1))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.n_accepted > e1.payload.promised) -> (e1.payload.v_accepted == (-(1))) ∧ (indexof(e0) > indexof(e1))
∀e0: ePrepareRsp :: (e0.payload.v_accepted != 0)
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.n_accepted == e1.payload.promised) -> (e1.payload.v_accepted == (-(1)))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.n_accepted > e1.payload.n_accepted) -> (e1.payload.v_accepted == (-(1)))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.promised == e1.payload.n_accepted) -> (e0.payload.v_accepted == (-(1)))
∀e0: ePrepareRsp ∀e1: ePrepareRsp :: (e0.payload.promised < e1.payload.promised) ∧ (e0.payload.n_accepted > e1.payload.n_accepted) -> (e1.payload.v_accepted == (-(1)))
