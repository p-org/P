∀e0: eDecided ∀e1: eP2A :: (e0.payload.round > e1.payload.completed)
∀e0: eDecided ∀e1: eP2A :: (e0.payload.round < e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eDecided ∀e1: eP2A :: (e0.payload.round == e1.payload.round) -> (indexof(e0) > indexof(e1)) ∧ (e0.payload.value == e1.payload.value)
∀e0: eDecided :: ∃e1: eP2A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round == e1.payload.round) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round > e1.payload.completed) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.round > e1.payload.completed) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (e0.payload.round > e1.payload.completed) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.round > e1.payload.completed) ∧ (indexof(e0) > indexof(e1)) ∧ (e0.payload.value == e1.payload.value)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.round < e1.payload.rp) -> (e0.payload.rp < e1.payload.rp) ∧ (e0.payload.rp < e1.payload.round) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.rp == e1.payload.round) -> (e0.payload.round > e1.payload.rp) ∧ (e0.payload.rp > e1.payload.rp) ∧ (e0.payload.round > e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.round == e1.payload.rp) -> (e0.payload.rp < e1.payload.rp) ∧ (e0.payload.rp < e1.payload.round) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.round < e1.payload.round) -> (e0.payload.rp < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.rp < e1.payload.rp) -> (e0.payload.rp < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.rp == e1.payload.rp) -> (e0.payload.round > e1.payload.rp) ∧ (e0.payload.rp < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.round == e1.payload.round) -> (e0.payload.round > e1.payload.rp) ∧ (e0.payload.rp < e1.payload.round) ∧ (e0.payload.proposer == e1.payload.proposer)
∀e0: eP1A ∀e1: eP1A :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.rp > e1.payload.rp) -> (e0.payload.round != e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.proposer == e1.payload.proposer) -> (e0.payload.round <= e1.payload.round) ∧ (e0.payload.rp < e1.payload.round)
∀e0: eP1A ∀e1: eP1A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round == e1.payload.round) -> (e0.payload.rp >= e1.payload.rp)
∀e0: eP1A ∀e1: eP1A :: (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.round == e1.payload.rp) -> (indexof(e0) < indexof(e1))
∀e0: eP1A ∀e1: eP1A :: (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.rp == e1.payload.round) -> (indexof(e0) > indexof(e1))
∀e0: eP1A ∀e1: eP1A :: (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.round < e1.payload.rp) -> (indexof(e0) < indexof(e1))
∀e0: eP1A ∀e1: eP1A :: (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.round < e1.payload.round) -> (indexof(e0) < indexof(e1))
∀e0: eP1A ∀e1: eP1A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.rp < e1.payload.rp) -> (indexof(e0) < indexof(e1))
∀e0: eP2A ∀e1: eP1B :: (e0.payload.completed < e1.payload.round) ∧ (e0.payload.completed <= e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.round == e1.payload.maxr) -> (e0.payload.completed < e1.payload.maxr) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.round < e1.payload.maxr) -> (e0.payload.completed < e1.payload.maxr) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.round > e1.payload.round) -> (e0.payload.round > e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.value == e1.payload.v) -> (e0.payload.completed < e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.completed == e1.payload.maxr) -> (e0.payload.round > e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.round == e1.payload.round) -> (e0.payload.round > e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.value == e1.payload.v) -> (e0.payload.round >= e1.payload.maxr)
∀e0: eP2A ∀e1: eP1B :: (e0.payload.round < e1.payload.maxr) ∧ (e0.payload.value == e1.payload.v) -> (indexof(e0) < indexof(e1))
∀e0: eP2A :: ∃e1: eP1B :: (e0.payload.completed == e1.payload.maxr) ∧ (e0.payload.completed < e1.payload.round) ∧ (_num_e_exists_ > quorum)
∀e0: eP2A :: ∃e1: eP1B :: (e0.payload.completed == e1.payload.maxr) ∧ (e0.payload.round > e1.payload.maxr) ∧ (_num_e_exists_ > quorum)
∀e0: eP2A :: ∃e1: eP1B :: (e0.payload.completed < e1.payload.round) ∧ (e0.payload.round > e1.payload.maxr) ∧ (_num_e_exists_ > quorum)
∀e0: eP2A :: ∃e1: eP1B :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round == e1.payload.round) ∧ (e0.payload.completed < e1.payload.round) ∧ (e1.payload.maxr >= e0.payload.completed) ∧ (_num_e_exists_ >= quorum) ∧ (e0.payload.round > e1.payload.maxr) ∧ (e0.payload.completed == e1.payload.maxr)
∀e0: eP2A ∀e1: eP2A :: (e0.payload.completed < e1.payload.round) ∧ (e0.payload.completed == e1.payload.completed) ∧ (e0.payload.round > e1.payload.completed)
∀e0: eP2A ∀e1: eP2A :: (e0.payload.proposer == e1.payload.proposer) -> (e0.payload.value == e1.payload.value)
∀e0: eP2A ∀e1: eP2A :: (e0.payload.round == e1.payload.round) -> (e0.payload.value == e1.payload.value) ∧ (e0.payload.proposer == e1.payload.proposer)
∀e0: eP2A ∀e1: eP2A :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.proposer == e1.payload.proposer) -> (e0.payload.round <= e1.payload.round)
∀e0: eP2A ∀e1: eP2A :: (e0.payload.proposer == e1.payload.proposer) ∧ (e0.payload.round < e1.payload.round) -> (indexof(e0) < indexof(e1))
∀e0: eDecided ∀e1: eP2B :: (indexof(e0) < indexof(e1)) -> (e0.payload.value == e1.payload.value) ∧ (e0.payload.round <= e1.payload.round)
∀e0: eDecided ∀e1: eP2B :: (e0.payload.round > e1.payload.round) -> (indexof(e0) > indexof(e1))
∀e0: eDecided ∀e1: eP2B :: (e0.payload.round < e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eDecided ∀e1: eP2B :: (e0.payload.round == e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eDecided :: ∃e1: eP2B :: (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eDecided :: ∃e1: eP2B :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ >= quorum) ∧ (e0.payload.round == e1.payload.round)
∀e0: eDecided ∀e1: eDecided :: (e0.payload.value == e1.payload.value)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round < e1.payload.rp) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.maxr < e1.payload.rp) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round == e1.payload.rp) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.maxr < e1.payload.rp) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.maxr == e1.payload.round) -> (e0.payload.round > e1.payload.rp) ∧ (e0.payload.maxr > e1.payload.rp) ∧ (e0.payload.round > e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round < e1.payload.round) -> (e0.payload.maxr < e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.maxr > e1.payload.round) -> (e0.payload.round > e1.payload.rp) ∧ (e0.payload.maxr > e1.payload.rp) ∧ (e0.payload.round > e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.maxr < e1.payload.rp) -> (e0.payload.maxr < e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round > e1.payload.round) -> (e0.payload.round > e1.payload.rp)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.maxr == e1.payload.rp) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.round > e1.payload.rp)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round == e1.payload.round) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.round > e1.payload.rp)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.maxr > e1.payload.rp) -> (e0.payload.round > e1.payload.rp)
∀e0: eP1B ∀e1: eP1A :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.maxr > e1.payload.rp) -> (e0.payload.round != e1.payload.round)
∀e0: eP1B ∀e1: eP1A :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.round == e1.payload.round) -> (e0.payload.maxr <= e1.payload.rp)
∀e0: eP1B ∀e1: eP1A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.maxr > e1.payload.rp) -> (indexof(e0) > indexof(e1))
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.maxr == e1.payload.rp) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.maxr < e1.payload.round) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.round > e1.payload.rp) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.maxr == e1.payload.rp) ∧ (e0.payload.maxr < e1.payload.round) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.maxr == e1.payload.rp) ∧ (e0.payload.round > e1.payload.rp) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.round > e1.payload.rp) ∧ (_num_e_exists_ > quorum)
∀e0: eP1B :: ∃e1: eP1A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round > e1.payload.rp) ∧ (e0.payload.maxr == e1.payload.rp) ∧ (e0.payload.round == e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.maxr == e1.payload.round) -> (e0.payload.maxr > e1.payload.maxr) ∧ (e0.payload.round > e1.payload.maxr) ∧ (e0.payload.round > e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.round < e1.payload.maxr) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.maxr < e1.payload.maxr) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.round == e1.payload.maxr) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.maxr < e1.payload.maxr) ∧ (e0.payload.round < e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.round < e1.payload.round) -> (e0.payload.maxr < e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.maxr == e1.payload.maxr) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.round > e1.payload.maxr)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.maxr < e1.payload.maxr) -> (e0.payload.maxr < e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.round == e1.payload.round) -> (e0.payload.maxr < e1.payload.round) ∧ (e0.payload.round > e1.payload.maxr)
∀e0: eP1B ∀e1: eP1B :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.acceptor == e1.payload.acceptor) -> (e0.payload.maxr < e1.payload.round)
∀e0: eP1B ∀e1: eP1B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.round == e1.payload.maxr) -> (indexof(e0) < indexof(e1))
∀e0: eP1B ∀e1: eP1B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.maxr == e1.payload.round) -> (indexof(e0) > indexof(e1))
∀e0: eP1B ∀e1: eP1B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.round < e1.payload.maxr) -> (indexof(e0) < indexof(e1))
∀e0: eP1B ∀e1: eP1B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.maxr == e1.payload.maxr) -> (e0.payload.v == e1.payload.v)
∀e0: eP2B ∀e1: eP2A :: (e0.payload.round > e1.payload.completed)
∀e0: eP2B ∀e1: eP2A :: (e0.payload.round == e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eP2B ∀e1: eP2A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round < e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eP2B :: ∃e1: eP2A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.round > e1.payload.completed) ∧ (_num_e_exists_ > quorum)
∀e0: eP2B :: ∃e1: eP2A :: (e0.payload.round == e1.payload.round) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eP2B :: ∃e1: eP2A :: (e0.payload.round > e1.payload.completed) ∧ (e0.payload.value == e1.payload.value) ∧ (_num_e_exists_ > quorum)
∀e0: eP2B :: ∃e1: eP2A :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.round > e1.payload.completed) ∧ (e0.payload.value == e1.payload.value) ∧ (e0.payload.round == e1.payload.round)
∀e0: eP2B ∀e1: eP2B :: (e0.payload.round == e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eP2B ∀e1: eP2B :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.round > e1.payload.round) -> (e0.payload.value == e1.payload.value)
∀e0: eP2B ∀e1: eP2B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.round > e1.payload.round) -> (indexof(e0) > indexof(e1))
∀e0: eP2B ∀e1: eP2B :: (indexof(e0) > indexof(e1)) ∧ (e0.payload.acceptor == e1.payload.acceptor) -> (e0.payload.round > e1.payload.round)
∀e0: eP2B ∀e1: eP2B :: (e0.payload.acceptor == e1.payload.acceptor) ∧ (e0.payload.round == e1.payload.round) -> (indexof(e0) == indexof(e1))
